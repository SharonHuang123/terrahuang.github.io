<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Terra&#39;s</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://terrahuang.github.io/"/>
  <updated>2017-07-28T11:20:11.648Z</updated>
  <id>https://terrahuang.github.io/</id>
  
  <author>
    <name>Terra</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo+GithubPages+nexT站点搭建</title>
    <link href="https://terrahuang.github.io/2017/07/27/hexo-github-nexT/"/>
    <id>https://terrahuang.github.io/2017/07/27/hexo-github-nexT/</id>
    <published>2017-07-27T07:11:06.000Z</published>
    <updated>2017-07-28T11:20:11.648Z</updated>
    
    <content type="html"><![CDATA[<div class="note warning"><p><strong>写在前面</strong><br>    趁离职期间想整理下这些年积累的东西，决定自己建个站点，为了方便简单选择了Hexo+GitHub Pages。但是做后端开发久了，真心觉得静态站点有点费事。考虑到github免费，那先将就吧，以后还是得自己搞个服务器。这篇先来讲讲搭建时遇到的坑，下一篇讲讲我对Hexo的理解。</p>
</div>
<a id="more"></a>
<h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><p>关于Hexo安装操作网上有很多，建议直接参考<a href="https://hexo.io/zh-cn/" title="Hexo官网" target="_blank" rel="external">Hexo官网</a>。我贴下几条关键指令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// 安装Hexo环境</div><div class="line">npm install hexo-cli -g</div><div class="line"></div><div class="line">// 初始化blog站点</div><div class="line">hexo init blog</div><div class="line">cd blog</div><div class="line">npm install</div><div class="line"></div><div class="line">// 生成静态文件</div><div class="line">hexo g</div><div class="line"></div><div class="line">// 在本地启动站点，指定端口，请加-p [端口]</div><div class="line">hexo server</div><div class="line">hexo server -p 5000</div><div class="line"></div><div class="line">// 发布</div><div class="line">hexo deploy</div></pre></td></tr></table></figure>
<h2 id="利用Github-Pages部署站点"><a href="#利用Github-Pages部署站点" class="headerlink" title="利用Github Pages部署站点"></a>利用Github Pages部署站点</h2><p>由于Hexo生成的静态文件，恰好github支持静态文件渲染，github就成了个人博客最好的免费服务器。我在网上查到很多部署方面的文章，基本都是如下说法：</p>
<p><strong>1. 在_config.yml配置deploy参数，前提先安装hexo-deployer-git插件：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: https://github.com/TerraHuang/terrahuang.github.io.git</div><div class="line">  branch:   // 分支这个地方很关键呀，被坑了...</div></pre></td></tr></table></figure></p>
<p><strong>2. 在github上创建新的repository，且以<code>[账号名].github.io</code>命名。将该项目克隆到本地。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/TerraHuang/terrahuang.github.io.git</div></pre></td></tr></table></figure></p>
<p>   以上步骤都没错，非常正确，不过坑马上就来了。<code>前方高能</code></p>
<h3 id="大坑一"><a href="#大坑一" class="headerlink" title="大坑一"></a>大坑一</h3><p><strong>3. 将hexo生成站点的代码发布到master分支，将部署的静态文件代码发布到gh-pages分支，然后在github项目Settings中将Source改为gh-pages。我照做如下：</strong></p>
<p><img src="/screenshot/20170728/git-page-setting.png" alt=""></p>
<p>虽然我的内心很崩溃，但是我还没放弃！！！</p>
<p>还好Source旁边有个<code>Learn more</code>，用户体验做的不错，点个赞。</p>
<p>点开它，才发现别有洞天呀，网上文章真不能全信~~</p>
<p><img src="/screenshot/20170728/learn-more.png" alt=""></p>
<div class="note primary"><p>哦，原来[账号名].github.io这种命名只能使用master分支作为站点资源。</p>
</div>
<p>另外Github pages还支持其它几种方式，如下：</p>
<p><img src="/screenshot/20170728/page-source.png" alt=""></p>
<p><strong>4. 正确的Github Pages发布方式:</strong></p>
<ul>
<li>静态站点部署文件应放到master分支</li>
<li>Hexo生成代码放到其它分支，或者新建其它的repository来托管</li>
<li><p>_config.yml的deploy-&gt;branch须写成<code>master</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: ...</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
</li>
<li><p>在浏览器中请求 <a href="https://[账号名].github.io" target="_blank" rel="external">https://[账号名].github.io</a> 即为个人站点。</p>
</li>
</ul>
<p><strong>5. Github Pages绑定域名：</strong></p>
<ul>
<li>在阿里云万网上购买域名</li>
<li>在master分支新建CNAME文件，名称必须全大写，内容为需绑定的域名<br><img src="/screenshot/20170728/dns.png" alt=""></li>
<li>在万网域名管理页面新增一条解析，如下：<br><img src="/screenshot/20170728/dns-express.png" alt=""></li>
</ul>
<p>具体步骤说明，请参考<strong>yuan3065的博客</strong>：<a href="http://blog.csdn.net/yuan3065/article/details/51594454" target="_blank" rel="external">GitHub Pages 绑定来自阿里云的域名</a></p>
<h2 id="nexT主题及改造"><a href="#nexT主题及改造" class="headerlink" title="nexT主题及改造"></a>nexT主题及改造</h2><p>毕竟是自己的第一个站点，选用主题也是很谨慎的，在众多炫目的主题中选择了nexT。据说目前是得星最多的一套主题。我看中它的点如下：<br><div class="note primary"><p><strong>优势：</strong> 样式简洁，文档详细，提供的第三方服务丰富，改造容易</p>
</div></p>
<h3 id="主题色"><a href="#主题色" class="headerlink" title="主题色"></a>主题色</h3><p>原来的黑色太暗沉，像我心里这么阳光的人，果断换了个明亮的调调。<br>但是nexT并没有提供主题色的更改配置，我用的是笨办法，直接在<code>theme/next/source/css/</code>中修改色值。以后有时间再修改下代码，提取到_config.yml配置中来。</p>
<h3 id="新增第三方服务"><a href="#新增第三方服务" class="headerlink" title="新增第三方服务"></a>新增第三方服务</h3><p>配置第三方服务比较简单，请参考<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">nexT文档</a></p>
<p>新增功能如下：</p>
<ul>
<li><strong>站内搜索：插件hexo-generator-searchdb</strong></li>
<li><strong>文章阅读次数统计：LeanCloud</strong></li>
<li><strong>内容分享：Jiathis</strong></li>
<li><strong>评论系统：disqus（不翻墙无法显示，考虑代理）</strong><h3 id="大坑二"><a href="#大坑二" class="headerlink" title="大坑二"></a>大坑二</h3><div class="note primary"><p>特别提醒：注册disqus时，一定要翻墙。如果是利用hosts文件翻墙，请在hosts新增一条[sitename].disqus.com-&gt;xx.xx.xx.xx域名映射，IP地址与disqus.com相同即可。</p>
</div>
</li>
</ul>
<h3 id="多图显示"><a href="#多图显示" class="headerlink" title="多图显示"></a>多图显示</h3><p>为了展示图册效果，尝试显示多图，在网上找到方法如下：</p>
<p><strong>1. 在站点/source下新增pictures/index.md文件。Front-matter如下：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: &quot;图册&quot;</div><div class="line">type: &quot;picture&quot;  //type必须为&apos;picture&apos;</div><div class="line">layout: post</div><div class="line">comments: false</div><div class="line">---</div></pre></td></tr></table></figure></p>
<p><strong>2. 内容为多图时，新增标签<code>{\% gp n-n \%}(content){\% endgp \%}</code>。具体如下：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;% gp 2-2 %&#125;</div><div class="line">![](http://octodex.github.com/images/minion.png)</div><div class="line">![](http://octodex.github.com/images/minion.png)</div><div class="line">&#123;% endgp %&#125;</div></pre></td></tr></table></figure>
<p>然并卵…    <code>前方高能</code></p>
<h3 id="大坑三"><a href="#大坑三" class="headerlink" title="大坑三"></a>大坑三</h3><p>居然报错了，为什么会报错，我的内心是拒绝的… 还好我没放弃！！！</p>
<p>找到<code>{\% gp \%}</code>标签代码：<code>/theme/next/source/script/tags/group-pictures.js</code></p>
<p>经过多次测试，发现代码错误，修改如下(43-63行)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* 2-2</div><div class="line">*</div><div class="line">* □ □  // 此为n-n设值所展示的排列方式，作为设值参考。默认：一行3列，依次排列</div><div class="line">*</div><div class="line">* @param pictures</div><div class="line">*/</div><div class="line">group2Layout2: function (pictures) &#123;</div><div class="line">  return this.getHTML([pictures]);  // 将pictures变成二维数组作为实参</div><div class="line">&#125;,</div><div class="line"></div><div class="line">/**</div><div class="line">* 3-1</div><div class="line">*</div><div class="line">* □ □ □</div><div class="line">*</div><div class="line">* @param pictures</div><div class="line">*/</div><div class="line">group3Layout1: function (pictures) &#123;</div><div class="line">  return this.getHTML([pictures]);  // 将pictures变成二维数组作为实参</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<div class="note primary"><p><strong>特别说明：</strong>其实只有2-2，3-1的组合会报错，只有两个方法传了一维数组，导致后续报错。</p>
</div>
<p>好了，现在不报错了。启动起来，果然可以展示一行两列的图组了。</p>
<p>然并卵…   <code>前方高能</code><br>怎么不能点击放大？！ 我的内心是崩溃的，但是我没有放弃！！！</p>
<p>通过与非<code>gp</code>标签图片对比，我发现<code>gp</code>标签渲染时，并没有给图片加<code>&lt;a/&gt;</code>标签，导致fancybox插件并未运行起来。</p>
<p>OK，找到原因了。定位代码: 在<code>/theme/next/source/script/tags/group-pictures.js</code>（824行<code>getColumnHtml</code>方法），做如下修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">getColumnHTML: function (pictures) &#123;</div><div class="line">    var columns = [];</div><div class="line">    var columnWidth = 100 / pictures.length;</div><div class="line">    var columnStyle = &apos; style=&quot;width: &apos; + columnWidth + &apos;%;&quot;&apos;;</div><div class="line"></div><div class="line">    for (var i = 0; i &lt; pictures.length; i++) &#123;</div><div class="line">    </div><div class="line">      // 在&lt;img /&gt;元素上加一个父层&lt;a/&gt;,结构如下：</div><div class="line">      // &lt;div class=&quot;group-picture-column&quot; &gt;</div><div class="line">      // &lt;a href=&quot;&quot; class=&quot;fancybox fancybox.image&quot; rel=&quot;group&quot;&gt;</div><div class="line">      //   &lt;img  /&gt;</div><div class="line">      // &lt;/a&gt;</div><div class="line">      // &lt;/div&gt;</div><div class="line">      var src = pictures[i].match(/src=&quot;[^&quot;]*&quot;/)[0].replace(/(src=)|&quot;/g,&quot;&quot;);</div><div class="line">      var html = &apos;&lt;div class=&quot;group-picture-column&quot; &apos; + columnStyle + &apos;&gt;&apos;</div><div class="line">          + &apos;&lt;a href=&quot;&apos;+ src +&apos;&quot; class=&quot;fancybox fancybox.image&quot; rel=&quot;group&quot;&gt;&apos;</div><div class="line">          + pictures[i] </div><div class="line">          + &apos;&lt;/a&gt;&lt;/div&gt;&apos;</div><div class="line">      columns.push(html);</div><div class="line">    &#125;</div><div class="line">    return columns.join(&apos;&apos;);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>这回终于解决了。效果请参考我的<a href="/pictures">图册</a>。</p>
<p><strong>填坑完结。希望我踩过三大坑，对大家有所帮助。</strong></p>
<div class="note warning"><p><strong>写给自己</strong><br>毕竟是第一篇，写了蛮久。我打算陆陆续续把学到的东西挪到这里来。写在这里，当勉励自己，不要懒散吧。</p>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note warning&quot;&gt;&lt;p&gt;&lt;strong&gt;写在前面&lt;/strong&gt;&lt;br&gt;    趁离职期间想整理下这些年积累的东西，决定自己建个站点，为了方便简单选择了Hexo+GitHub Pages。但是做后端开发久了，真心觉得静态站点有点费事。考虑到github免费，那先将就吧，以后还是得自己搞个服务器。这篇先来讲讲搭建时遇到的坑，下一篇讲讲我对Hexo的理解。&lt;/p&gt;
&lt;/div&gt;
    
    </summary>
    
      <category term="前端" scheme="https://terrahuang.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Hexo" scheme="https://terrahuang.github.io/tags/Hexo/"/>
    
      <category term="nexT" scheme="https://terrahuang.github.io/tags/nexT/"/>
    
      <category term="github" scheme="https://terrahuang.github.io/tags/github/"/>
    
      <category term="填坑记" scheme="https://terrahuang.github.io/tags/%E5%A1%AB%E5%9D%91%E8%AE%B0/"/>
    
  </entry>
  
</feed>
