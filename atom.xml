<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Terra&#39;s</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://terrahuang.github.io/"/>
  <updated>2017-09-04T14:33:39.022Z</updated>
  <id>https://terrahuang.github.io/</id>
  
  <author>
    <name>Terra</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>(转) JavaScript 疲劳终极指南：我们行业的真相</title>
    <link href="https://terrahuang.github.io/2017/09/04/forward-1/"/>
    <id>https://terrahuang.github.io/2017/09/04/forward-1/</id>
    <published>2017-09-04T14:33:26.940Z</published>
    <updated>2017-09-04T14:33:39.022Z</updated>
    
    <content type="html"><![CDATA[<p>看到这篇文章，很有感触，恰好是我在上一家公司面临的困惑。为了减小支出，几乎不愿做新技术尝试，大多数开发人员都在不停重复。文章说到，测试驱动开发，但是在公司里绝大多数项目没有单元测试代码，测试人员都相当少，集成测试，回归测试，用户测试只是走个程序。移动端开发更甚，为了节约时间，连测试都省了，线上问题层出不穷。我相信其它公司也有这种现象，但究竟怎么做才是支出与收益的平衡呢？使用一种技术是为了解决问题，但是如果有更好的方案呢？<a id="more"></a></p>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@myvin" target="_blank" rel="external">myvin</a><br>链接：<a href="http://www.zcfy.cc/article/3914" target="_blank" rel="external">http://www.zcfy.cc/article/3914</a><br>原文：<a href="http://lucasfcosta.com/2017/07/17/The-Ultimate-Guide-to-JavaScript-Fatigue.html" target="_blank" rel="external">http://lucasfcosta.com/2017/07/17/The-Ultimate-Guide-to-JavaScript-Fatigue.html</a></p>
</blockquote>
<p><strong>抱怨 JS 疲劳就像是在抱怨人类发明了太多解决问题的工具</strong>：从邮件到飞机到宇宙飞船。</p>
<p>上周我在 NebraskaJS 2017 会议上做了一个和这个话题极其类似的演讲，我也收到了许多积极的反馈，所以我就想这个演讲也可以写成一篇文章发表出来，让更多的人知道，并帮助他们应对 JS 疲劳，理解我们行业的真相。<strong>这篇文章的目的是希望改变你对软件工程行业的普遍的看法，助你在你可能工作的领域上一臂之力</strong>。</p>
<p>激励我写下这篇文章并且彻底改变我生活的一个原因是 <a href="http://www.kalzumeus.com/2011/10/28/dont-call-yourself-a-programmer/" target="_blank" rel="external">Patrick McKenzie 写的这篇很赞的文章，文章名叫《请不要自称程序员和一些职业生涯建议》</a>。<strong>强烈推荐你阅读下上面这篇文章。</strong>本文的大部分内容都是基于 Patrick 的那篇关于 JavaScript 生态系统的文章的建议，其中也夹杂了最近几年我在科技行业工作的一些想法。</p>
<p>第一个章节可能会有点哲学化，但是我保证绝对值得一读。</p>
<h2 id="我们行业的真相-101"><a href="#我们行业的真相-101" class="headerlink" title="我们行业的真相 101"></a><strong>我们行业的真相 101</strong></h2><p>就像 Patrick 在 <a href="http://www.kalzumeus.com/2011/10/28/dont-call-yourself-a-programmer/" target="_blank" rel="external">他的文章</a> 里写到的，我们先从一些最基础、最根本的真相说起：</p>
<p>软件是用来解决业务问题的</p>
<p>实事就是这样。<strong>软件存在的意义并不是用来取悦我们程序员的</strong>，并不是为了让我们写出漂亮代码的，也不是为科技行业创造就业机会的。<strong>实际上，软件的存在扼杀了太多的工作岗位，其中也包括我们的</strong>，这就是为什么基本工资在未来的几年将会变得更加重要，但是这就完全是另一个话题了。</p>
<p>我这样说很抱歉，但是归根结底原因在于：在软件工程中（其他行业也是如此）只有两样东西至关重要：</p>
<p><strong>支出和收益</strong></p>
<p><strong>支出削减的越多，收益提升的越多，那么你的价值就越大</strong>，削减支出、提升收益最通用的一个方法就是用机器代替人工，从长远来看，这种方法是更有效的，而且支出也更少。</p>
<p>你不是被雇佣来写代码的</p>
<p><strong>科技不是目的。</strong>没有人关心你使用的是什么编程语言，没有人关心你的团队选择的是什么框架，没有人关心你的数据结构有多么优雅，也没有人关心你的代码写得有多漂亮。<strong>人们唯一关心的是：你的软件支出是多少，产生的收益是多少，仅此而已</strong>。</p>
<p>写出漂亮的代码对于你的客户而言没有任何卵用。我们之所以要写漂亮的代码，是因为长远来看这样会更高效，能够减少支出，增加收益。</p>
<p>我们努力避免 bug 不是说我们重视正确性，而是<strong>我们的客户</strong>重视正确性。如果你曾经遇到过一个 bug 成为了一个特性的话，那么你就知道我在说什么了。这个 bug 确实存在，但是我们不会去修复。出现这种情况并不是说我们的目的就是制造 bug，我们的目的是创造价值。但是如果我们的 bug 能够使客户开心，能够提升他们的收益，我们也能达成我们的目标，如此皆大欢喜，何乐而不为呢。</p>
<p>可重复使用的太空火箭、自动驾驶汽车、机器人、AI：这些东西之所以存在，并不是因为我们觉得它们很酷，而是因为在它们的背后有商业利益存在。我并不是说这些东西背后的那群人只在乎金钱，我确定他们也认为这东西很酷，但事实是，如果没有经济利益或者说没有潜在的经济价值，这些东西是不会存在的。</p>
<p>也许我不应该将这一章节取名为“我们行业的真相 101”，也许应该取名为“资本主义真相 101”。</p>
<p>说到我们的目标——减少支出提升收益——我认为作为程序员的我们应该更加关注需求和设计，积极思考，积极参与业务决策，这就是为什么了解我们正在开展的问题领域变得极其重要。之前你有多少次在你的经理或商务人士没有考虑到的某些边缘案例中想到应该发生什么？</p>
<p>1975 年，Boehm 做过一项研究，研究发现，软件中 64% 的错误都是由设计引起的，只有 36% 的错误是代码错误。另一项叫做 <a href="http://ieeexplore.ieee.org/document/1702333/" target="_blank" rel="external">“高阶软件——软件定义方法论”</a> 的研究也显示：<strong>在 NASA 的阿波罗计划中，73% 的错误都是设计错误</strong>。</p>
<p>设计和需求存在的唯一目的就是定义我们将要解决的问题，而解决问题就能创造收益。</p>
<blockquote>
<p>没有了需求或设计，编程就是往一个空的 text 文件里面添加 bug。</p>
<ul>
<li>Louis Srygley</li>
</ul>
</blockquote>
<p>这个原则同样适用于 JavaScript 生态系统的工具。Babel、webpack、react、Redux、Mocha、Chai、Typescript，所有这些工具之所以存在就是为了解决对应的问题，我们要理解它们要解决的是什么问题，要仔细思考什么时候需要这些工具，否则，我们就会感到 JS 疲劳，因为：</p>
<p>当我们使用我们不需要的工具来解决根本就不存在的问题的时候，JS 疲劳就出现了。</p>
<p>正如 Donald Knuth 曾今说的：“过早优化是万恶之源”。请记着，软件的存在是为了解决相应的业务问题，大部分的软件其实都挺令人厌烦的，既没有多强的扩展性，也没有高性能约束。要专注于解决业务问题，专注于减少支出、提升收益，这才是需要关注的焦点。只有在当你需要优化的时候才去优化，否则，软件可能会增加一些不必要的复杂性，而这些复杂性会增加支出，并且不能产生足够的收益来抵消这些支出。</p>
<p>这就是为什么我认为应该在我们的工作当中应用 <a href="https://en.wikipedia.org/wiki/Test_Driven_Development" target="_blank" rel="external">测试驱动开发</a> 原则。我说的测试驱动开发并不是说仅仅去做测试。<strong>我说的是在问题暴露之前将其扼杀在摇篮里。这才是 TDD 要做的</strong>。正如 Kent Beck 说的“TDD 减少了恐惧”，因为它能够指导你的开发节奏，允许你慢慢地逐步解决你的问题，一步一个脚印，一次解决一个问题。当我们要使用新的技术时，这样做同样也会减少恐惧。</p>
<p>一次解决一个问题同时也降低了 <a href="https://en.wikipedia.org/wiki/Analysis_paralysis" target="_blank" rel="external">分析麻痹</a>，举个栗子，就好比你打开了 Netflix，你本可以看一些视频的，但是却花了三个小时来决定看什么。一次解决一个问题的方式可以缩小我们做决定的范围，缩小了做决定的范围我们的选择就会相对减少，选择减少了我们就降低了分析麻痹。</p>
<p>不知道你有木有想过，如果只有几个可看的电视频道，决定看哪个频道会变得多么简单？如果家里只有几张游戏盘，决定玩儿哪个游戏会变得多么简单？</p>
<h2 id="那么对于-JavaScript-而言呢？"><a href="#那么对于-JavaScript-而言呢？" class="headerlink" title="那么对于 JavaScript 而言呢？"></a><strong>那么对于 JavaScript 而言呢？</strong></h2><p>截止到我写这篇文章时，NPM 上有 489,989 个包，第二天将会有差不多 515 个包在上面发布。</p>
<p>我们使用、抱怨的这些包都是有一个历史出发点的的，为了理解我们为什么需要这些包，我们必须理解这个历史出发点：<strong>它们是用来解决问题的。</strong></p>
<p>Babel、Dart、CoffeeScript 和其他转义器之所以会出现，是因为我们不仅仅使用 JavaScript 写代码，但是我们又想使其能够在浏览器中正常运行。Babel 甚至能够使我们使用 JavaScript 新版本语法写的代码在旧版本浏览器中运行，因为众所周知，不同版本的 ECMA 规范在各个浏览器中的兼容是一个很大的问题。尽管现在 ECMA 规范已经越来越可靠，但是我们仍然需要 Babel。如果你想了解更多关于 Babel 的相关知识，我强烈推荐你读读 <a href="https://babeljs.io/blog/2016/12/07/the-state-of-babel" target="_blank" rel="external">这篇由 Henry Zhu 写的很赞的文章</a>。</p>
<p>像 Webpack 和 Browserify 这样的模块化打包工具也有它们存在的理由。想必你们依然记得，曾几何时，我们使用大量的 <code>script</code> 标签将脚本引入使其能够正常运行。这样做的结果就是污染了全局命名空间，当一个脚本依赖另一个脚本时，很难合理地将它们整合起来。为了解决这个问题，<a href="http://requirejs.org" target="_blank" rel="external"><code>Require.js</code></a>诞生了，但是它仍然有它自己的问题：它不够简单，语法也会引起其他问题，正如你在<a href="https://benmccormick.org/2015/05/28/moving-past-requirejs/" target="_blank" rel="external">这篇文章中</a>看到的。然后 Node.js 借鉴了 <code>CommonJS</code> 的 import，这种 import 是同步的，简单整洁，但是我们仍然需要一种可以在浏览器中运行的方式，这就是为什么我们需要 Webpack 和 Browserify 的原因。</p>
<p>Webpack 确实解决了很多问题，比如可以像处理 JavaScript 依赖那样处理 CSS、图片和许多其他的资源。</p>
<p>前端框架确实有点复杂，但是由于它们的存在，使得我们写代码时减少了同步加载，如此一来，我们就不必担心 DOM 操作，甚至也不用和那些乱七八糟的浏览器 API（JQuery 已经解决了这个问题）直接打交道，众所周知，浏览器的兼容性处理错误百出，而且效率低下。</p>
<p>这就是我们在计算机科学中一直在做的事情。我们使用低级抽象，并在其上构建更多的抽象。我们应该更多考虑的是，我们的软件应该如何运行，而不是怎么让它运行，这样的话，才能更高效。</p>
<p>但是所有这些工具都有一个共同之处：<strong>它们之所以存在是因为 web 平台发展太快了</strong>。如今任何地方都有 web 技术的存在：web 浏览器，桌面应用，电话应用，甚至手表应用。</p>
<p>这个革命性发展同样也暴露出了我们需要解决的问题。比如，渐进式 web 应用（PWA），它们之所以存在不是因为它们很炫酷，不是因为作为程序员的我们乐于写 PWA。请牢记本文的第一节：<strong>PWA 之所以存在，是因为它们创造了商业价值</strong>。</p>
<p>通常情况下，标准的制定速度并没有那么快，因此，针对对应的问题我们需要自己寻求解决方法，这就是为什么有一个活跃度高、有创造力的社区是一件很 nice 的事情。我们不是在解决问题，就是在去解决问题的路上。<strong>当然，我们也会顺其自然</strong>。</p>
<p>适用于我们的工具会更好地成长，获得更多的贡献者，更快地发展，有时一些工具最终将融合来自于其他工具的优秀想法，并且变得比它们更受欢迎。这就是我们演变的进程。</p>
<p>拥有越多的工具，我们就会拥有越多的选择。想必你还记着 UNIX 思想，它主张我们在编程时，一次只做一件事情，而且要将它做到极致。</p>
<p>我们可以清晰的看到这种思想在 JS 测试环境中重现，比如，我们使用 Mocha 跑测试，使用 Chai 做断言，而在 Java 中，JUnit 把这些事情全部包揽了。这就意味着，如果你在使用某一个工具的过程中遇到了问题，并且发现另一个工具更适合我们的话，那么我们就可以直接简单的替换掉之前的工具就可以了，其他工具的优势我们依然能够保留。</p>
<p>UNIX 思想同时主张我们应该去写能够“和谐相处”的程序。这正是我们在做的！比如说 Babel、Webpack 和 React。同时使用它们完全能够正常运行，但是我们并不需要使用一个工具而去依赖另一个工具。比如我们在测试环境中使用 Mocha 和 Chai，那么我们也可以安装 Karma 在多种环境中来跑同样的测试。</p>
<h2 id="如何应对"><a href="#如何应对" class="headerlink" title="如何应对"></a><strong>如何应对</strong></h2><p>针对正在遭受 JS 疲劳的同学，我的第一个建议是：你要清醒的认识到<strong>你并不需要掌握所有东西</strong>。有时我们会一次性学习过多的知识——甚至当我们并不需要的时候，这样做只会增加疲劳感。你喜欢的领域你要保持积极的学习动力，可以深入了解，而对于其他的知识，你大可保持慵懒的态度。我这里说的慵懒不是让你懒惰，而是在你需要某些知识的时候再去学习。当你遇到了问题，且需要使用某项知识技能来解决的时候，直接现学就可以了。</p>
<p>另一个重要的建议是：<strong>脚踏实地，从头开始</strong>。在你使用任何 JavaScript 框架之前，请确保你对原生 JavaScript 学习的已经足够透彻。这是你掌握 JavaScript 并能够将其“玩弄于鼓掌之中”的唯一途径，否则，当你遇到了你之前从来没有见过的问题时，你就不知道该如何下手。学习核心的 web 技术——CSS、HTML5、JavaScript和计算机科学基础，甚至是 HTTP 协议的工作原理——将会有助于你快速掌握任何其他的技术。</p>
<p>但是，请务必不要用力过度。偶尔你要挑战一下自己，亲自动手做一些项目。正如 Sacha Greif 在<a href="https://medium.freecodecamp.org/a-study-plan-to-cure-javascript-fatigue-8ad3a54f2eb1" target="_blank" rel="external">这篇文章里</a>写到的那样：花费过多的时间学习基础知识就像你要学习游泳时总是在学习流体动力学。学到一定程度以后，你就应该跳到游泳池里去尝试游泳。</p>
<p>同时，请务必不要拘泥于一项技能。我们现在可用的技术其实在过去都早已被发明出来了。当然，它们特性不同，名字不同，但是，本质上它们都是相同的。</p>
<p>如果你看看 NPM 的话，它也不是什么新技术，很早之前就有 Maven Central 和 Ruby Gems 了。</p>
<p>用来转义代码的 Babel，也是借鉴了早期一些非常出名的编译器的原则和理论，比如 GCC。</p>
<p>甚至 JSX 也不是什么新想法。E4X（ECMAScript for XML）10 多年前就存在了。</p>
<p>那么现在你可能会问：“那 Gulp、Grunt 和 NPM 脚本又如何呢？”额，好吧，很遗憾的告诉你，这些问题 GNU Make 在 1976 年都已经解决了。实际上，现在仍然有大量的 JavaScript 工程在使用 GNU Make，比如 Chai.js。但是我们不会那样做，因为我们是喜欢复古的潮人。我们使用 <code>make</code>，因为它解决了我们的问题，正如我们之前讨论过，这就是你的目标所在。</p>
<p>如果你真的想要理解某项技术，想要在面对任何问题时都能够得心应手，那么，请深入了解。成功最关键的一个因素就是好奇心，所以<strong>请深入了解你喜欢的技术</strong>。尝试自下而上的理解它们，每当你认为某些东西如“魔法”一般时，那么请通过探索代码库来揭开它的神秘面纱。</p>
<p>在我看来，说到学习这块儿，Richard Feinman 的这句名言最适合不过了：</p>
<blockquote>
<p>我创造不了的东西，我理解不了</p>
</blockquote>
<p>再来看看下面这句，<a href="https://www.quora.com/What-did-Richard-Feynman-mean-when-he-said-What-I-cannot-create-I-do-not-understand" target="_blank" rel="external">这是 Richard 在同样的一块儿黑板上写下的</a>：</p>
<blockquote>
<p>对于已经存在答案的问题要知道如何解决</p>
</blockquote>
<p>是不是很赞？</p>
<p>当 Richard 说这些话的时候，他正在讨论的是关于获取理论结果并如何复现的问题，但是我认为，该原则同样适用于软件工程。能够解决我们的问题的这些工具已经被发明出来了，它们已经存在了，所以我们也应该能够自己来实现它们。</p>
<p>这正是我喜欢 Egghead.io 中<a href="https://egghead.io/lessons/javascript-redux-implementing-store-from-scratch" target="_blank" rel="external">一些视频</a>的原因，视频中 Dan Abramov 解释了如何从头开始实现 Redux 中存在的某些功能，或者教你<a href="https://jasonformat.com/wtf-is-jsx/" target="_blank" rel="external">如何构建自己的 JSX 渲染器</a>。</p>
<p>那么我们为什么不去尝试着自己来实现或者去 GitHub 上阅读代码库理解它们的原理来实现这些东西呢？我确定你一定能够发现很多有用的知识。评论和 demo 也许会撒谎，也许会误导，但是代码不会。</p>
<p>另一个我们在这篇文章中谈论的最多的话题是：<strong>你不应该超前你自己</strong>。遵循 TDD 原则，一次只解决一个问题。你被雇佣是来降低成本提升收益的，你所做的都是为了解决问题，这就是软件存在的意义。</p>
<p>既然我们喜欢拿我们自身的角色和土木工程相关的作对比，那么就让我们快速对比下软件开发和土木工程，就像<a href="https://www.barnesandnoble.com/p/building-microservices-sam-newman/1119741399/2677517060476?st=PLA&amp;sid=BNB_DRS_Marketplace+Shopping+Books_00000000&amp;2sid=Google_&amp;sourceId=PLGoP4760&amp;k_clickid=3x4760" target="_blank" rel="external">Sam Newman 在《构建微服》中做的那样</a>。</p>
<p>我们喜欢自称“工程师”或“架构师”，但是这样真的好么？我们一直在为不到一百年前的计算机开发我们所知的计算机软件，而竞技场都存在大约两千年了。</p>
<p>还记得最近一次看到一座桥坍塌是什么时候吗？还记得最近一次你的手机或浏览器奔溃是什么时候吗？</p>
<p>为了更好的解释，我借用一个我比较喜欢的栗子。</p>
<p>这是美丽惊艳的巴塞罗那。</p>
<p><img src="http://p0.qhimg.com/t01d2a2853ebec10aa8.jpg" alt="The City of Barcelona"></p>
<p>当我们从这个距离看这座城市的话，它开起来和世界上的其他城市一般无二，但是当我们从上面俯瞰时，巴塞罗那看起来是这个样子的：</p>
<p><img src="http://p0.qhimg.com/t0103b36fe4a34456c8.jpg" alt="Barcelona from above"></p>
<p>正如你看到的，每一个块儿都有着相同的尺寸，所有的块儿都有条不紊的排列着。如果你曾经去过巴塞罗那的话，你一定知道穿越这座城市有多么爽，知道它运行的多么良好。</p>
<p>但是坐在飞机上俯瞰巴塞罗那的人无法预知两百年或者三百年后它会成为什么样子。城市里的人们进进出出，他们要做的是让城市随着时间的流逝有机地成长、适应。他们必须做好应对变化的准备。</p>
<p>同样的事情也发生在软件方面。软件更新迭代很快，会经常需要重构，需求也会频繁的变更，这完全在我们的预期之外。</p>
<p>所以，不要把自己当做软件工程师，要把自己当做城市规划者。让你的软件有机成长，按需适应。兵来将挡，水来土掩，问题来了就去解决，但是要确保一切都有其所在。</p>
<p>在软件领域做这些事情比在城市里做这些事情要容易的多，因为<strong>软件是灵活的，土木工程并不是</strong>，<strong>在软件世界里，我们的“建筑时长”就是编译时长</strong>。在巴塞罗那我们不能通过简单地毁掉建筑给新的建筑腾出空地儿，但是在软件世界里我们可以非常简单的实现。我们随时可以推翻重做，随时可以做实验，我们想构建几次就构建几次，时间花费也就那么几秒钟，但是我们思考的时间却比构建的要多得多。我们的工作是纯智力型的。</p>
<p>所以<strong>把自己当做城市规划者，让你的软件按需成长、适应</strong>。</p>
<p>通过这样做，你就能够更好的抽象，也会知道在什么合适的时间来采用它们。</p>
<p>正如 Sam Koblenski 所说：</p>
<blockquote>
<p>抽象只适用于合适的语境，而合适的语境是随着系统的发展而发展的。</p>
</blockquote>
<p>有时候我经常会看到这种现象：有些同学在学习一项新技术时会去寻找模板，但是在我看来，<strong>当你开始学习的时候，应当避免使用模板</strong>。当然，如果你已经有了一定经验，那么模板和生成器还是很有用的。模板剥夺了大部分的控制权，因此你就学不到如何去新建一个工程，你也无法准确理解每个代码片段适合哪里。</p>
<p>当你无法轻轻松松地把事情搞定，当你感受到的都是苦苦的挣扎时，也许是时候另辟蹊径了。我们的宗旨是<strong>力争懒惰</strong>，你应该为了以后不工作的目标而去工作。如此一来，你就会有更多的自由时间去做其他的事情，从而减低了成本，提升了收益，所以这也是你达成目的的另一条途径。你不应该没头没脑的努力工作，你要更加聪明的工作。</p>
<p>也许有些人也会拥有你现在的烦恼，但是如果没人这样做的话，那么你的机会就到了，你可以找到你自己的解决方法，可以给其他人伸出援助之手。</p>
<p>但是有时候在你没有看到别人做的更优秀之前，你并不会意识到其实你也可以做的更高效。这就是<strong>与人交流</strong>的重要性。</p>
<p>通过和其他人交流，你可以分享你的经验，为对方的职业生涯提供帮助，也能发现能够提升我们工作流的新工具，而且更重要的是，你能够学到解决问题的方法。这就是我喜欢阅读分享公司解决问题方法的文章的原因。</p>
<p>尤其是在我们的领域里，我们总是认为 Google 和 StackOverflow 能够回答我们的所有问题，但是我们仍然有必要知道我们要问的问题。我确定会有这么一种场景：你遇到了一个你无法解决的问题，因为你无法准确的知道发生了什么事情，所以你自己都不清楚你应该问什么问题。</p>
<p>但是如果我需要用一个建议来总结整篇文章的话，那就是：</p>
<p>解决问题。</p>
<p>软件不是魔法箱，也不是一首诗（很不幸）。它的存在是为了解决问题，提高人们的生活水平。软件的存在是为了让世界向前发展。</p>
<p><strong>年轻人，该你出动解决问题了</strong>。</p>
<h2 id="相关-推荐文章"><a href="#相关-推荐文章" class="headerlink" title="相关/推荐文章"></a><strong>相关/推荐文章</strong></h2><ul>
<li><p><a href="http://www.kalzumeus.com/2011/10/28/dont-call-yourself-a-programmer/" target="_blank" rel="external">请不要自称程序员和一些职业生涯建议（强烈推荐）Patrick McKenzie</a></p>
</li>
<li><p><a href="http://sam-koblenski.blogspot.com/2014/07/the-cost-of-abstraction.html" target="_blank" rel="external">抽象的代价 Sam Koblenski</a></p>
</li>
<li><p><a href="https://segment.com/blog/the-deep-roots-of-js-fatigue/" target="_blank" rel="external">JavaScript 疲劳根源 Calvin French-Owen</a></p>
</li>
<li><p><a href="https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4" target="_blank" rel="external">JavaScript 疲劳 Eric Clemmons</a></p>
</li>
<li><p><a href="http://2ality.com/2016/02/js-fatigue-fatigue.html" target="_blank" rel="external">JavaScript 疲劳疲劳 - Dr. Axel Rauschmayer</a></p>
</li>
<li><p><a href="https://changelog.com/jsparty/3" target="_blank" rel="external">JavaScript 疲劳、AMP、和 Paths.js - JS Party Episode #3</a></p>
</li>
<li><p><a href="https://www.barnesandnoble.com/p/building-microservices-sam-newman/1119741399/2677517060476?st=PLA&amp;sid=BNB_DRS_Marketplace+Shopping+Books_00000000&amp;2sid=Google_&amp;sourceId=PLGoP4760&amp;k_clickid=3x4760" target="_blank" rel="external">构建微服（书籍） Sam Newman</a></p>
</li>
<li><p><a href="https://medium.freecodecamp.org/a-study-plan-to-cure-javascript-fatigue-8ad3a54f2eb1" target="_blank" rel="external">治愈 JavaScript 疲劳计划</a></p>
</li>
</ul>
<p><strong>保持联系！</strong></p>
<p><strong>如果你有任何疑惑、想法或者你不同意我的观点的地方，请在下方留言分享或<a href="https://twitter.com/lfernandescosta" target="_blank" rel="external">在 twwitter 上</a>联系我</strong>。你的任何想法我都乐于倾听。</p>
<p>谢谢阅读！          </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看到这篇文章，很有感触，恰好是我在上一家公司面临的困惑。为了减小支出，几乎不愿做新技术尝试，大多数开发人员都在不停重复。文章说到，测试驱动开发，但是在公司里绝大多数项目没有单元测试代码，测试人员都相当少，集成测试，回归测试，用户测试只是走个程序。移动端开发更甚，为了节约时间，连测试都省了，线上问题层出不穷。我相信其它公司也有这种现象，但究竟怎么做才是支出与收益的平衡呢？使用一种技术是为了解决问题，但是如果有更好的方案呢？
    
    </summary>
    
      <category term="前端" scheme="https://terrahuang.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="forwarding" scheme="https://terrahuang.github.io/tags/forwarding/"/>
    
      <category term="tools" scheme="https://terrahuang.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>存储过程避免参数嗅探</title>
    <link href="https://terrahuang.github.io/2017/08/30/parameter-sniffing/"/>
    <id>https://terrahuang.github.io/2017/08/30/parameter-sniffing/</id>
    <published>2017-08-30T15:12:15.346Z</published>
    <updated>2017-09-04T14:28:46.816Z</updated>
    
    <content type="html"><![CDATA[<p>以前写 SQL Server 存储过程的时候，碰到过一个问题。本来是一个很简单的查询，复杂度也不高，参数@date传成null时，查询特别慢。查了下资料，发现SQL Server有一个叫<code>Parameter sniffing</code>的特性。什么是参数嗅探？可以参见这篇文章：<a href="http://www.cnblogs.com/lyhabc/articles/3222179.html" target="_blank" rel="external">参数嗅探ParameterSniffing</a>。<br><a id="more"></a></p>
<h3 id="性能影响"><a href="#性能影响" class="headerlink" title="性能影响"></a>性能影响</h3><p>SQL Server在存储过程执行之前都会制定一个执行计划。SQL在编译的时候并不知道参数@date的值是多少，所以它在执行执行计划的时候就要进行大量的猜测。假设传递给@date的参数大部分都是非空字符串，而FACT表中有40%的date字段都是null，那么SQL Server就会选择全表扫描而不是索引扫描来对参数@date制定执行计划。全表扫描是在参数为空或为0的时候最好的执行计划，但是全表扫描严重影响了性能。</p>
<p>假设你第一次使用了Exec foo_procedure @date=’20080312’ 那么SQL Server就会使用20080312这个值作为下次参数@date的执行计划的参考值，而不会进行全表扫描了，但是如果使用@date=null, 则下次执行计划就要根据全表扫描进行了。</p>
<h3 id="避免方案"><a href="#避免方案" class="headerlink" title="避免方案"></a>避免方案</h3><p>有两种方式能够避免出现“Parameter sniffing”问题：</p>
<ul>
<li>通过使用declare声明的变量来代替参数：使用set @variable=@date的方式，将出现@date的sql语句全部用@variable来代替。</li>
<li>将受影响的sql语句隐藏起来，比如：<ul>
<li>将受影响的sql语句放到某个子存储过程中</li>
<li>使用动态sql <code>EXEC(@sql)</code> 来执行受影响的sql</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前写 SQL Server 存储过程的时候，碰到过一个问题。本来是一个很简单的查询，复杂度也不高，参数@date传成null时，查询特别慢。查了下资料，发现SQL Server有一个叫&lt;code&gt;Parameter sniffing&lt;/code&gt;的特性。什么是参数嗅探？可以参见这篇文章：&lt;a href=&quot;http://www.cnblogs.com/lyhabc/articles/3222179.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参数嗅探ParameterSniffing&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="sqlserver" scheme="https://terrahuang.github.io/categories/sqlserver/"/>
    
    
      <category term="存储过程" scheme="https://terrahuang.github.io/tags/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>移动开发H5页面调试方法</title>
    <link href="https://terrahuang.github.io/2017/08/30/html5-debugging/"/>
    <id>https://terrahuang.github.io/2017/08/30/html5-debugging/</id>
    <published>2017-08-30T14:38:18.380Z</published>
    <updated>2017-09-04T14:50:51.910Z</updated>
    
    <content type="html"><![CDATA[<h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><ol>
<li>在Win OS下，只能调试android设备</li>
<li>Android模拟器调试，真机环境下需在代码中设置WebView属性 <code>WebView.setWebContentsDebuggingEnabled(true)</code> 才能调试<a id="more"></a>
<h2 id="软件要求"><a href="#软件要求" class="headerlink" title="软件要求"></a>软件要求</h2></li>
<li>安装Chrome浏览器，版本32及以上</li>
<li>安装任意一款安卓模拟器，如夜神，genymotion等。</li>
</ol>
<h2 id="调试步骤"><a href="#调试步骤" class="headerlink" title="调试步骤"></a>调试步骤</h2><h3 id="更新hosts文件"><a href="#更新hosts文件" class="headerlink" title="更新hosts文件"></a>更新hosts文件</h3><ol>
<li>请前往<a href="https://laod.cn/hosts/2017-google-hosts.html" target="_blank" rel="external">https://laod.cn/hosts/2017-google-hosts.html</a> 下载最新hosts文件。</li>
<li>更新本地host文件C:\Windows\System32\drivers\etc\hosts，或只添加google相关域名解析。<blockquote>
<p>编辑hosts文件，添加：<br>61.91.161.217    chrome-devtools-frontend.appspot.com<br>61.91.161.217    chrometophone.appspot.com</p>
</blockquote>
</li>
<li>更新后，重启电脑。</li>
</ol>
<h3 id="选择要调试的页面"><a href="#选择要调试的页面" class="headerlink" title="选择要调试的页面"></a>选择要调试的页面</h3><p>打开模拟器，安装应用，打开要调试的H5页面。<br><img src="/screenshot/20170830/debugger.png" alt=""></p>
<h3 id="运用Chrome进行调试"><a href="#运用Chrome进行调试" class="headerlink" title="运用Chrome进行调试"></a>运用Chrome进行调试</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><ol>
<li>打开chrome, 在地址栏输入chrome://inspect</li>
<li>在Devices中，勾选Discover USB devices</li>
<li>找到要调试设备的H5页面</li>
<li>点击inspect, 进入调试页<br><img src="/screenshot/20170830/method1.png" alt=""></li>
</ol>
<h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><ol>
<li>打开chrome, 按F12打开DevTools面板</li>
<li>点开more, 选择Remote devices, 打开Devices面板</li>
<li>在Devices中点击要调试的模拟器</li>
<li>选择要调试的H5页面，点击inspect, 进入调试页面<br><img src="/screenshot/20170830/method2.png" alt=""></li>
</ol>
<div class="note warning"><p>注意事项<br>Chrome官方调试指南可参见：<a href="https://developers.google.com/web/tools/chrome-devtools/remote-debugging/?utm_source=dcc&amp;utm_medium=redirect&amp;utm_campaign=2016q3debugging/?utm_source=dcc&amp;utm_medium=redirect&amp;utm_campaign=2016q3（需更新hosts文件才能访问此网页）" target="_blank" rel="external">https://developers.google.com/web/tools/chrome-devtools/remote-debugging/?utm_source=dcc&amp;utm_medium=redirect&amp;utm_campaign=2016q3debugging/?utm_source=dcc&amp;utm_medium=redirect&amp;utm_campaign=2016q3（需更新hosts文件才能访问此网页）</a></p>
</div>
<h3 id="Chrome调试功能详解"><a href="#Chrome调试功能详解" class="headerlink" title="Chrome调试功能详解"></a>Chrome调试功能详解</h3><h4 id="调试页面元素样式"><a href="#调试页面元素样式" class="headerlink" title="调试页面元素样式"></a>调试页面元素样式</h4><p><strong>1.点击“Select”按钮，选中页面元素</strong><br><strong>2.在Styles面板可动态调整选中元素样式</strong><br><img src="/screenshot/20170830/chrome1.png" alt=""></p>
<h4 id="调试js代码"><a href="#调试js代码" class="headerlink" title="调试js代码"></a>调试js代码</h4><p><strong>1.进入“Sources”面板，选择要调试的js文件</strong><br><strong>2.标记断点，执行断点操作，如图点击“下一步”，即可进行单步调试</strong><br><img src="/screenshot/20170830/chrome2.png" alt=""></p>
<h4 id="查看本地存储数据"><a href="#查看本地存储数据" class="headerlink" title="查看本地存储数据"></a>查看本地存储数据</h4><p><strong>1.进入“Resources”面板，选择Local Storage，则可查看存放在localStorage中的数值</strong><br><img src="/screenshot/20170830/chrome3.png" alt=""><br><strong>2.选择Web SQL, 选中H5中新建本地数据库，打开相应表，则可查看表中数据</strong><br><img src="/screenshot/20170830/chrome4.png" alt=""></p>
<h4 id="查看日志和错误信息"><a href="#查看日志和错误信息" class="headerlink" title="查看日志和错误信息"></a>查看日志和错误信息</h4><p><strong>进入“Console”面板，即可查看js运行错误信息，和调用console相关方法打印出的日志信息</strong><br><img src="/screenshot/20170830/chrome5.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;适用范围&quot;&gt;&lt;a href=&quot;#适用范围&quot; class=&quot;headerlink&quot; title=&quot;适用范围&quot;&gt;&lt;/a&gt;适用范围&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在Win OS下，只能调试android设备&lt;/li&gt;
&lt;li&gt;Android模拟器调试，真机环境下需在代码中设置WebView属性 &lt;code&gt;WebView.setWebContentsDebuggingEnabled(true)&lt;/code&gt; 才能调试
    
    </summary>
    
      <category term="前端" scheme="https://terrahuang.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="webapp" scheme="https://terrahuang.github.io/tags/webapp/"/>
    
      <category term="html5" scheme="https://terrahuang.github.io/tags/html5/"/>
    
      <category term="android" scheme="https://terrahuang.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>fetch API</title>
    <link href="https://terrahuang.github.io/2017/08/30/fetch/"/>
    <id>https://terrahuang.github.io/2017/08/30/fetch/</id>
    <published>2017-08-30T14:08:26.876Z</published>
    <updated>2017-09-04T14:40:02.132Z</updated>
    
    <content type="html"><![CDATA[<p>fetch API 提供了一个JavaScript接口，用于访问和操纵HTTP管道的部分，例如请求和响应。它还提供了一个全局 fetch()方法，该方法提供了一种简单，合乎逻辑的方式来跨网络异步获取资源。</p>
<p>fetch()的实质是将XMLHttpRequest结合Promise做了一层封装，返回的是一个Promise对象。另外，fetch()中数据传送是以数据流（stream）的形式进行的。具体请参见：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalFetch/fetch" target="_blank" rel="external">MDN文档</a><br><a id="more"></a></p>
<p>这里贴上一段<a href="https://github.com/github/fetch/" target="_blank" rel="external">fetch源码</a>，大家一看就一目了然：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">self.fetch = function(input, init) &#123;</div><div class="line">  return new Promise(function(resolve, reject) &#123;</div><div class="line">    var request = new Request(input, init)</div><div class="line">    var xhr = new XMLHttpRequest()</div><div class="line"></div><div class="line">    xhr.onload = function() &#123;</div><div class="line">      var options = &#123;</div><div class="line">        status: xhr.status,</div><div class="line">        statusText: xhr.statusText,</div><div class="line">        headers: parseHeaders(xhr.getAllResponseHeaders() || &apos;&apos;)</div><div class="line">      &#125;</div><div class="line">      options.url = &apos;responseURL&apos; in xhr ? xhr.responseURL : options.headers.get(&apos;X-Request-URL&apos;)</div><div class="line">      var body = &apos;response&apos; in xhr ? xhr.response : xhr.responseText</div><div class="line">      resolve(new Response(body, options))</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    xhr.onerror = function() &#123;</div><div class="line">      reject(new TypeError(&apos;Network request failed&apos;))</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    xhr.ontimeout = function() &#123;</div><div class="line">      reject(new TypeError(&apos;Network request failed&apos;))</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    xhr.open(request.method, request.url, true)</div><div class="line"></div><div class="line">    if (request.credentials === &apos;include&apos;) &#123;</div><div class="line">      xhr.withCredentials = true</div><div class="line">    &#125; else if (request.credentials === &apos;omit&apos;) &#123;</div><div class="line">      xhr.withCredentials = false</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (&apos;responseType&apos; in xhr &amp;&amp; support.blob) &#123;</div><div class="line">      xhr.responseType = &apos;blob&apos;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    request.headers.forEach(function(value, name) &#123;</div><div class="line">      xhr.setRequestHeader(name, value)</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    xhr.send(typeof request._bodyInit === &apos;undefined&apos; ? null : request._bodyInit)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的代码涉及到了三个类，由fetch API提供：<a href="">Request</a>, <a href="">Headers</a>, <a href="">Response</a></p>
<h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><p>首先，贴一下fetch的基本用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">fetch(input /*请求链接 或 Request对象*/, init/*初始参数*/);</div><div class="line"></div><div class="line">// 示例：</div><div class="line">fetch(&apos;https://api.github.com/&apos;, &#123;</div><div class="line">	method: &quot;GET&quot;,</div><div class="line">	headers: new Headers()</div><div class="line">&#125;).then(function(response)&#123;</div><div class="line">   var data = response.json();</div><div class="line">   // ...</div><div class="line">&#125;).catch(function(error)&#123;</div><div class="line">   // ...</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>当参数input传入一个url， input 和 init 则生成一个Request对象。其中参数init有如下可选字段：</p>
<ul>
<li>method  请求的方法，[GET|POST|HEAD|DELETE|PUT]</li>
<li>headers 头部字段, 为一个Headers对象</li>
<li>body 请求实体，GET和HEAD请求没有body</li>
<li>credentials 是否可以跨域访问cookie [omit|same-origin|include], chrome默认为include</li>
<li>mode 请求的模式, [cors|no-cors|same-origin|navigate]。默认值应该为 cors，可跨域请求。</li>
</ul>
<p>其中在POST请求中，init的body字段的用法如下：<br><strong>1.以字符串形式传入参数, 即</strong></p>
<blockquote>
<p>body: ‘a=1&amp;b=2’ 或 body: JSON.stringify({a:1,b:2})</p>
</blockquote>
<p><strong>2.传入以’x-www-form-urlencoded’格式的查询参数，即</strong></p>
<blockquote>
<p>const param = new URLSearchParams();<br>param.append(“a”,1);<br>body: param</p>
</blockquote>
<p><strong>3.传入表单数据，包括上传文件，即</strong></p>
<blockquote>
<p>const param = new FormData(document.querySelector(‘form’));<br>param.append(‘a’,’1’);<br>body: param</p>
</blockquote>
<h3 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h3><p>Headers设定字段，与XMLHttpRequest中方法setRequestHeader()设定字段保持一致，基本用法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var headers = new Headers(&#123;</div><div class="line">  &apos;Content-Type&apos;: &apos;text/plain&apos;,</div><div class="line">  &apos;Cache-Control&apos;: &apos;max-age=3600&apos;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">headers.append(&quot;Accept&quot;, &quot;application/json&quot;);</div><div class="line">headers.set(&apos;X-Custom-Header&apos;,&apos;ProcessThisImmediately&apos;);</div><div class="line">headers.get(&apos;Accept&apos;);</div></pre></td></tr></table></figure></p>
<h3 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h3><p>Response对象为数据流处理提供了5个方法，如下：</p>
<ul>
<li>.text()：返回字符串</li>
<li>.json()：返回一个JSON对象</li>
<li>.formData()：返回一个FormData对象</li>
<li>.blob()：返回一个blob对象</li>
<li>.arrayBuffer()：返回一个二进制数组<br>但由于body属性是一个stream对象，数据只能单向传送一次，若要多次读取，需要使用clone()方法。</li>
</ul>
<p>Response的常用属性如下：</p>
<ul>
<li>status：整数值，表示状态码（比如200）</li>
<li>statusText：字符串，表示状态信息，默认是“OK”</li>
<li>ok：布尔值，表示状态码是否在200-299的范围内</li>
<li>headers：Headers对象，表示HTTP回应的头信息</li>
<li>url：字符串，表示HTTP请求的网址</li>
<li>type：字符串，合法的值有五个basic、cors、default、error、opaque。basic表示正常的同域请求；cors表示CORS机制的跨域请求；error表示网络出错，无法取得信息，status属性为0，headers属性为空，并且导致fetch函数返回Promise对象被拒绝；opaque表示非CORS机制的跨域请求，受到严格限制。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;fetch API 提供了一个JavaScript接口，用于访问和操纵HTTP管道的部分，例如请求和响应。它还提供了一个全局 fetch()方法，该方法提供了一种简单，合乎逻辑的方式来跨网络异步获取资源。&lt;/p&gt;
&lt;p&gt;fetch()的实质是将XMLHttpRequest结合Promise做了一层封装，返回的是一个Promise对象。另外，fetch()中数据传送是以数据流（stream）的形式进行的。具体请参见：&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalFetch/fetch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MDN文档&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://terrahuang.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="es6" scheme="https://terrahuang.github.io/tags/es6/"/>
    
      <category term="http" scheme="https://terrahuang.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>form表单提交常见问题</title>
    <link href="https://terrahuang.github.io/2017/08/30/form/"/>
    <id>https://terrahuang.github.io/2017/08/30/form/</id>
    <published>2017-08-30T14:04:07.177Z</published>
    <updated>2017-09-04T14:41:27.668Z</updated>
    
    <content type="html"><![CDATA[<p>form表单提交是一个很基础的问题，但是仔细研究下还是挺有意思的。下面，先贴一段html代码，作为讨论的前提：<a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;form method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;label&gt;用户名&lt;/label&gt;</div><div class="line">    &lt;input placeholder=&quot;用户名&quot; type=&quot;text&quot; name=&quot;name&quot;&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;label&gt;密码&lt;/label&gt;</div><div class="line">    &lt;input placeholder=&quot;密码&quot; type=&quot;password&quot; name=&quot;password&quot;&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;label&gt;头像&lt;/label&gt;</div><div class="line">    &lt;input type=&quot;file&quot; name=&quot;avatar&quot; /&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;input id=&quot;save&quot; type=&quot;submit&quot; value=&quot;提交&quot;&gt;</div><div class="line">  &lt;button&gt;button提交&lt;/button&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure></p>
<p><strong>1.submit事件，如何触发，与click事件的发生顺序是怎样？</strong><br>在form表单中按下Enter键或页面按钮，触发submit事件的前提有两种情况：</p>
<ul>
<li>只有一个输入框（可以没有提交按钮)</li>
<li>至少有一个提交按钮, <code>&lt;input type=&quot;submit&quot;&gt;</code> 和 <code>&lt;button&gt;</code> 都可以看成是提交按钮</li>
</ul>
<p>若有多个提交按钮，enter键将触发第一个提交按钮事件<br>当提交按钮绑定click事件，先执行click事件，再执行提交事件；要阻止submit事件，在click事件中加上e.preventDefault()</p>
<p><strong>2.提交前如何先做前端数据验证，再提交后台？</strong><br>方案有很多，列举如下：</p>
<ul>
<li>不使用提交按钮，绑定click事件，先做验证，再通过ajax提交数据</li>
<li>使用提交按钮，绑定click事件，先做验证，不通过则调用e.preventDefault()阻止提交</li>
<li>使用提交按钮，绑定onsubmit事件，先做验证，不通过返回false阻止提交</li>
</ul>
<p><strong>3.表单文件如何上传？</strong><br>方案有很多，列举如下：</p>
<ul>
<li>使用提交按钮， 在form标签中，加入 <code>enctype=&quot;multipart/form-data&quot;</code></li>
<li>不使用提交按钮，通过 <code>new FormData()</code> 收集表单数据，通过ajax提交</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;form表单提交是一个很基础的问题，但是仔细研究下还是挺有意思的。下面，先贴一段html代码，作为讨论的前提：
    
    </summary>
    
      <category term="前端" scheme="https://terrahuang.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="https://terrahuang.github.io/tags/html/"/>
    
      <category term="jquery" scheme="https://terrahuang.github.io/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>Ajax跨域问题</title>
    <link href="https://terrahuang.github.io/2017/08/30/cors/"/>
    <id>https://terrahuang.github.io/2017/08/30/cors/</id>
    <published>2017-08-30T13:48:43.210Z</published>
    <updated>2017-09-04T07:51:44.759Z</updated>
    
    <content type="html"><![CDATA[<p>Ajax跨域问题是老生常谈了，作Web开发包括WebApp经常碰到，索性一次性写清楚。</p>
<p>首先，跨域问题的产生是源于浏览器的 <code>同源政策</code> ，目的是保证用户信息安全，防止网站窃取数据。在非同源的情况下，有以下限制：<br><a id="more"></a></p>
<ul>
<li>Cookie、LocalStorage 和 IndexDB 无法读取</li>
<li>DOM 无法获取</li>
<li>AJAX 请求不能发送</li>
</ul>
<p>这里主要讲下如何解决AJAX请求不能发送的问题。解决方案有如下三种：</p>
<ul>
<li>JSONP</li>
<li>CORS</li>
<li>WebSocket</li>
</ul>
<h4 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h4><p>JSONP的原理就是往页面动态插入 <code>&lt;script&gt;</code> 标签，向服务器请求JSON数据，其返回的数据会传入回调函数，js代码示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">window.onload = function () &#123;</div><div class="line">  var script = document.createElement(&apos;script&apos;);</div><div class="line">  script.setAttribute(&quot;type&quot;,&quot;text/javascript&quot;);</div><div class="line">  script.src = &apos;http://example.com/ip?callback=foo&apos;;</div><div class="line">  document.body.appendChild(script);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function foo(data)&#123;</div><div class="line">  console.log(&apos;Your public IP address is: &apos; + data.ip);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>因为通过 <code>&lt;script&gt;</code> 标签发出请求，所以JSONP只支持GET请求。</p>
<h4 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h4><p>CORS（Cross-origin resource sharing）：跨域资源共享，是一个w3c标准，允许浏览器向跨源服务器发起Ajax请求。CORS需要浏览器和服务器同时支持，主流浏览器都支持该功能，但IE要在IE10及以上。</p>
<p>CORS请求分为两种：简单请求和非简单请求。详情请见：<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">跨域资源共享 CORS 详解</a></p>
<h5 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h5><p>简单请求满足以下条件：</p>
<ul>
<li>请求方法必须是：HEAD,GET,POST</li>
<li>HTTP的头信息不超出以下几种字段：<ul>
<li>Accept</li>
<li>Accept-Language</li>
<li>Content-Language</li>
<li>Last-Event-ID</li>
<li>Content-Type (<strong>只限于application/x-www-form-urlencoded、multipart/form-data、text/plain</strong>)</li>
</ul>
</li>
</ul>
<p>处理简单请求时，浏览器直接在头部新增字段 <code>origin: [域名]</code><br>如果origin字段值在服务器指定域名内，响应头部会新增如下字段;如若没有，则说明请求存在跨源问题，会抛出一个错误，但可能状态码仍然返回200。</p>
<blockquote>
<p>Access-Control-Allow-Origin: <a href="http://api.bob.com" target="_blank" rel="external">http://api.bob.com</a><br>Access-Control-Allow-Credentials: true<br>Access-Control-Expose-Headers: Content-Type</p>
</blockquote>
<h5 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h5><p>非简单请求，是指比如请求方法是PUT或DELETE，或者Content-Type字段的类型是application/json。此类cors请求会有两个步骤：</p>
<ol>
<li><p>发起<strong>预检</strong>请求，头部信息如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">OPTIONS /cors HTTP/1.1</div><div class="line">Origin: http://api.bob.com</div><div class="line">Access-Control-Request-Method: PUT</div><div class="line">Access-Control-Request-Headers: X-Custom-Header</div><div class="line">Host: api.alice.com</div><div class="line">Accept-Language: en-US</div><div class="line">Connection: keep-alive</div><div class="line">User-Agent: Mozilla/5.0...</div></pre></td></tr></table></figure>
</li>
<li><p>若Origin字段在服务器指定域名内，则响应头部信息会新增 <code>Access-Control-Allow-Origin</code>,<code>Access-Control-Allow-Methods</code>,<code>Access-Control-Allow-Headers</code>三个字段(如下)；若无，则会抛出错误。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Date: Mon, 01 Dec 2008 01:15:39 GMT</div><div class="line">Server: Apache/2.0.61 (Unix)</div><div class="line">Access-Control-Allow-Origin: http://api.bob.com</div><div class="line">Access-Control-Allow-Methods: GET, POST, PUT</div><div class="line">Access-Control-Allow-Headers: X-Custom-Header</div><div class="line">Content-Type: text/html; charset=utf-8</div><div class="line">Content-Encoding: gzip</div><div class="line">Content-Length: 0</div><div class="line">Keep-Alive: timeout=2, max=100</div><div class="line">Connection: Keep-Alive</div><div class="line">Content-Type: text/plain</div></pre></td></tr></table></figure>
</li>
<li><p>预检通过后，浏览器会发出正式请求，和简单请求的过程一样。</p>
</li>
</ol>
<p>了解CORS的内部机制后，要想解决跨域就显而易见了。只需在服务端返回时，在响应头部增加如下字段：</p>
<blockquote>
<p>Access-Control-Allow-Origin: [<a href="http://xxxxx|*" target="_blank" rel="external">http://xxxxx|*</a>] 允许跨源访问域名 或者 * （表明任何源都可以）<br>Access-Control-Allow-Methods：[GET,POST,PUT,DELETE] 允许跨源访问方式<br>Access-Control-Allow-Headers: [头部字段名] 允许额外发送的头信息字段</p>
</blockquote>
<p>在ASP.NET中可以在Web.config的 <code>&lt;system.webServer&gt;</code> 节点内新增如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;httpProtocol&gt;</div><div class="line">  &lt;customHeaders&gt;</div><div class="line">    &lt;add name=&quot;Access-Control-Allow-Origin&quot; value=&quot;*&quot; /&gt;</div><div class="line">    &lt;add name=&quot;Access-Control-Allow-Headers&quot; value=&quot;Content-Type&quot; /&gt;</div><div class="line">    &lt;add name=&quot;Access-Control-Allow-Methods&quot; value=&quot;GET, POST, PUT, DELETE, OPTIONS&quot; /&gt;</div><div class="line">  &lt;/customHeaders&gt;</div><div class="line">&lt;/httpProtocol&gt;</div></pre></td></tr></table></figure></p>
<h4 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h4><p>WebSocket是一种通信协议，使用ws://（非加密）和wss://（加密）作为协议前缀。该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。</p>
<p>WebSocket请求的头信息如下, 服务器可通过 <code>origin</code> 判断当前域名是否在白名单中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">GET /chat HTTP/1.1</div><div class="line">Host: server.example.com</div><div class="line">Upgrade: websocket</div><div class="line">Connection: Upgrade</div><div class="line">Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==</div><div class="line">Sec-WebSocket-Protocol: chat, superchat</div><div class="line">Sec-WebSocket-Version: 13</div><div class="line">Origin: http://example.com</div></pre></td></tr></table></figure></p>
<p>如验证通过，响应头部如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 101 Switching Protocols</div><div class="line">Upgrade: websocket</div><div class="line">Connection: Upgrade</div><div class="line">Sec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=</div><div class="line">Sec-WebSocket-Protocol: chat</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ajax跨域问题是老生常谈了，作Web开发包括WebApp经常碰到，索性一次性写清楚。&lt;/p&gt;
&lt;p&gt;首先，跨域问题的产生是源于浏览器的 &lt;code&gt;同源政策&lt;/code&gt; ，目的是保证用户信息安全，防止网站窃取数据。在非同源的情况下，有以下限制：&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://terrahuang.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="ajax" scheme="https://terrahuang.github.io/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>浏览器HTTP缓存机制</title>
    <link href="https://terrahuang.github.io/2017/08/29/http-cache/"/>
    <id>https://terrahuang.github.io/2017/08/29/http-cache/</id>
    <published>2017-08-29T09:09:39.023Z</published>
    <updated>2017-08-29T17:19:00.171Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器HTTP缓存机制主要有两种 <code>强缓存</code>（Pragma/Expires/Cache-Control）和 <code>缓存协商</code>（Last-Modified/ETag）。</p>
<h2 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h2><p>所谓强缓存，就是优先命中浏览器的缓存资源，当缓存不符合条件或不存在时，再向服务器发起请求。<br><a id="more"></a></p>
<ul>
<li><code>http 1.0</code> 协议版本中通过头部字段Pragma/Expires来标识</li>
<li><code>http 1.1</code> 协议中新增了字段Cache-Control定义缓存过期时间</li>
</ul>
<h3 id="Pragma"><a href="#Pragma" class="headerlink" title="Pragma"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Pragma" target="_blank" rel="external">Pragma</a></h3><p>Pragma是通用首部字段，设置 <code>Pragma:no-cache</code> 用于禁用缓存。</p>
<p>1.客户端设置如下, 目前只有IE可识别，且不一定会加到请求报文。只对当前页面有效，对页面资源无效<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=&quot;Pragma&quot; content=&quot;no-cache&quot; /&gt;</div></pre></td></tr></table></figure></p>
<p>2.若响应报文包含Pragma字段，浏览器会对资源标记，后续刷新页面不会命中缓存，而是直接发送请求。</p>
<h3 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Expires" target="_blank" rel="external">Expires</a></h3><p>Expires是实体首部字段，设置 <code>Expires:[GMT时间值]</code> 用于知会浏览器资源缓存过期时间</p>
<p>1.客户端设置如下，目前只有IE可识别，且不会加到请求报文。只对当前页面有效，对页面资源无效。如果希望不缓存页面，那么可以把content设为-1或0。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=&quot;expires&quot; content=&quot;mon, 18 apr 2016 14:30:00 GMT&quot; /&gt;</div></pre></td></tr></table></figure></p>
<p>2.若响应报文包含Expires，字段值返回的是服务端时间。若服务端与客户端时间不同步，这个过期时间就会不准确，导致出错。</p>
<p><strong>如果Expires和Pramga同时出现在报文中，Pragma的优先级更高</strong></p>
<h3 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control" target="_blank" rel="external">Cache-Control</a></h3><p>Cache-Control是通用首部字段，设置 <code>Cache-Control:[cache-directive]</code> 指令来实现缓存机制。缓存指令是单向的，在响应里设置的指令，在请求中不用包含相同的指令。[cache-directive]有多个可选值，还可以组合使用，且在请求报文和响应报文定义不同，我列出了常见的几种，其它参见<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control" target="_blank" rel="external">MDN文档</a> </p>
<table>
<thead>
<tr>
<th>请求报文可选值</th>
<th>说明</th>
<th>响应报文可选值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>no-cache</td>
<td>不使用缓存，要求向原服务器发起请求</td>
<td>public</td>
<td>任何情况都得缓存资源</td>
</tr>
<tr>
<td>no-store</td>
<td>不保存到缓存或临时文件</td>
<td>Private[=field-name]</td>
<td>仅开放给某些用户作缓存,不能做共享缓存</td>
</tr>
<tr>
<td>max-age=seconds</td>
<td>告知服务器客户端可接收Age不大于seconds秒的资源</td>
<td>no-cache</td>
<td>不使用缓存，要求向服务器发起</td>
</tr>
<tr>
<td>only-if-cached</td>
<td>告知服务器客户端希望优先获取缓存</td>
<td>no-store</td>
<td>不保存到缓存或临时文件</td>
</tr>
<tr>
<td>max-stale[=seconds]</td>
<td>告知服务器可接收超过缓存时间的资源</td>
<td>max-age=seconds</td>
<td>告知客户端在seconds秒内，资源不需要再次请求</td>
</tr>
<tr>
<td>no-transform</td>
<td>告知服务器客户端希望实体数据没有被转换</td>
<td>must-revalidate</td>
<td>当前资源一定向服务端发去请求验证的，失败返回504</td>
</tr>
</tbody>
</table>
<p><em>示例</em></p>
<blockquote>
<p>1.关闭缓存<br>Cache-Control: no-cache, no-store, must-revalidate<br>2.缓存静态资源<br>Cache-Control:public, max-age=31536000</p>
</blockquote>
<h2 id="缓存协商"><a href="#缓存协商" class="headerlink" title="缓存协商"></a>缓存协商</h2><p>当浏览器缓存过期，向服务器重新发送请求，若服务器资源并未更新时，直接返回304知会客户端使用缓存资源；否则返回更新资源。响应报文通过Last-Modified和ETag来判断缓存资源是否更新。这些做可以提高缓存复用率，加快页面渲染速度。</p>
<h3 id="Last-Modified"><a href="#Last-Modified" class="headerlink" title="Last-Modified"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Last-Modified" target="_blank" rel="external">Last-Modified</a></h3><p>Last-Modified是资源在服务器上的最后修改时间，设置格式 <code>Last-Modified: [GMT时间]</code></p>
<ul>
<li>客户端第一次发起请求 -&gt; 服务端</li>
<li>服务端返回数据 [ <em>加上Last-Modified信息</em> ] -&gt; 客户端 -&gt; 客户端标记资源</li>
<li>客户端第二次请求 [ <em>报文加上标记字段</em> ] -&gt; 服务端</li>
<li>服务端 [ <em>比较修改时间，若一致，直接返回304和响应报头；否则，读取更新资源并返回</em> ] -&gt; 客户端</li>
</ul>
<blockquote>
<p>第二次请求报文附加字段有两个：<br>If-Modified-Since: <em>Last-Modified-value</em>  该值与服务端一致，返回304 （浏览器以此字段为准）<br>If-Unmodified-Since:<em>Last-Modified-value</em> 该值与服务端不一致，返回412</p>
</blockquote>
<h3 id="ETag"><a href="#ETag" class="headerlink" title="ETag"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/ETag" target="_blank" rel="external">ETag</a></h3><p>ETag是服务器资源生成的唯一标识，设置格式 <code>ETag:[字符串，如md5,guid]</code></p>
<ul>
<li>客户端第一次发起请求 -&gt; 服务端</li>
<li>服务端返回数据 [ <em>加上唯一标识，若是分布式，须保证生成唯一标识的算法一致</em> ] -&gt; 客户端 -&gt; 客户端标记ETag</li>
<li>客户端第二次请求 [ <em>报文加上标记字段</em> ] -&gt; 服务端</li>
<li>服务端 [ <em>比较唯一标识，若一致，直接返回304和响应报头；否则，读取更新资源并返回</em> ] -&gt; 客户端</li>
</ul>
<blockquote>
<p>第二次请求报文附加字段有两个：<br>If-None-Match: <em>ETag-value</em>  匹配上ETag，直接回送304  （浏览器以此字段为准）<br>If-Match: <em>ETag-value</em>      没有匹配上ETag，或者收到了“*”值而当前并没有该资源实体，则应当返回412</p>
</blockquote>
<p><strong>当If-None-Match与If-Modified-Since一同使用，If-None-Match优先级更高</strong><br><strong>Last-Modified和ETag同时被使用，则要求它们的验证都必须通过才会返回304，否则返回更新资源和200</strong></p>
<h2 id="实际应用技巧"><a href="#实际应用技巧" class="headerlink" title="实际应用技巧"></a>实际应用技巧</h2><h3 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h3><p>1.网上有种说法，地址栏输入URL，F5/Ctrl+R(刷新按钮)用自动加上“Cache-Control:max-age=0”，不会命中强缓存，直接发起请求。<br>  另外还有一个说法， 不打开DevTool会直接向服务端发起请求，打开则会命中缓存。<br>  这两种说法都是错的。 以上两种情况都会先命中浏览器缓存，我用Chrome60反复测试了。</p>
<p>2.Chrome从缓存中读取数据，返回的是<code>200 ok from disk cache</code> \ <code>200 ok from memory cache</code>。from memory cache会比from disk cache读取速度更快，两种形式应该是表明缓存读取的方式不同</p>
<p>3.在DevTool-&gt;network-&gt;勾选<code>disable cahce</code> 或者 <code>shift+F5</code>，都会请求最新内容(304协商缓存、强缓存都无效)</p>
<ul>
<li>不会检查本地是否有缓存。</li>
<li>请求头信息(request header)不添加If-Modified-Since和If-None-Match字段</li>
</ul>
<p>4.查看所有的cache文件可在浏览器输入 chrome://view-http-cache/</p>
<h3 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h3><p>1.静态资源部分，特别是图片资源，需设定一个较长的缓存时间，最好是可以在资源链接上加参数 <code>max-age</code> :</p>
<blockquote>
<p><a href="http://xxxxx/logo.png?max_age=2592000" target="_blank" rel="external">http://xxxxx/logo.png?max_age=2592000</a></p>
</blockquote>
<p>2.服务端在近期修改了该文件的话，因为强缓存客户端将无法获得最新，可将静态资源文件名或参数带上一串md5或时间标记符:</p>
<blockquote>
<p><a href="https://xxxxxxx/xxxxx.js?e23800c454aa573c0ccb16b52665ac26" target="_blank" rel="external">https://xxxxxxx/xxxxx.js?e23800c454aa573c0ccb16b52665ac26</a><br><a href="http://xxxxxx/xxxxx_94e7ca2.js" target="_blank" rel="external">http://xxxxxx/xxxxx_94e7ca2.js</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;浏览器HTTP缓存机制主要有两种 &lt;code&gt;强缓存&lt;/code&gt;（Pragma/Expires/Cache-Control）和 &lt;code&gt;缓存协商&lt;/code&gt;（Last-Modified/ETag）。&lt;/p&gt;
&lt;h2 id=&quot;强缓存&quot;&gt;&lt;a href=&quot;#强缓存&quot; class=&quot;headerlink&quot; title=&quot;强缓存&quot;&gt;&lt;/a&gt;强缓存&lt;/h2&gt;&lt;p&gt;所谓强缓存，就是优先命中浏览器的缓存资源，当缓存不符合条件或不存在时，再向服务器发起请求。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://terrahuang.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="http" scheme="https://terrahuang.github.io/tags/http/"/>
    
      <category term="cache" scheme="https://terrahuang.github.io/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>JS练习题</title>
    <link href="https://terrahuang.github.io/2017/08/22/exercise/"/>
    <id>https://terrahuang.github.io/2017/08/22/exercise/</id>
    <published>2017-08-22T11:32:51.733Z</published>
    <updated>2017-08-22T12:40:18.762Z</updated>
    
    <content type="html"><![CDATA[<p>整理了一些JS练习题和参考代码，请看下文。</p>
<p><strong>1. 补全parseParm()，使其输出如下结果：</strong><br>{<br>   user: ‘anonymous’,<br>   id: [123, 456],  // 重复出现的 key 要组装成数组，能被转成数字的就转成数字类型<br>   city: ‘北京’,    // 中文<br>   enabled: true,  // 未指定值的 key 约定值为 true<br>}<br>url = ‘<a href="http://www.domain.com/?user=anonymous&amp;id=123&amp;id=456&amp;\" target="_blank" rel="external">http://www.domain.com/?user=anonymous&amp;id=123&amp;id=456&amp;\</a><br>      city=%E5%8C%97%E4%BA%AC&amp;d&amp;enabled’;<br>parseParam(url);<br><a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">function parseParam(url) &#123;</div><div class="line">  var params = &#123;&#125;;</div><div class="line">  var urlArr = (url || &quot;&quot;).split(&quot;?&quot;);</div><div class="line"></div><div class="line">  if (urlArr.length &lt; 2 || (!urlArr[1])) &#123;</div><div class="line">    return params;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  var paramArr = urlArr[1].split(&quot;&amp;&quot;);</div><div class="line">  for (var i = 0; i &lt; paramArr.length; i++) &#123;</div><div class="line">    var pairArr = paramArr[i].split(&apos;=&apos;);</div><div class="line">    var key = pairArr[0];</div><div class="line">    var value = pairArr.length &gt; 1 ? decodeURI(pairArr[1]) : key == &quot;enabled&quot; ? true : &quot;&quot;;</div><div class="line"></div><div class="line">    if (params[key] == undefined) &#123;</div><div class="line">      params[key] = value;</div><div class="line">    &#125; else &#123;</div><div class="line">      params[key] = [params[key]];</div><div class="line">      params[key].push(value);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  return params;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>2. 实现一个最简单的模板引擎:</strong><br>render(‘我是[[name]], 年龄[[age]], 性别[[sex]]’,{<br>    name:’姓名’,<br>    age:18<br>})</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 如果?紧跟在任何量词 * + ? 或 &#123;&#125; 的后面，将会使量词变为非贪婪的（匹配尽量少的字符）</div><div class="line">// 和缺省使用的贪婪模式（匹配尽可能多的字符）正好相反。</div><div class="line">function render(tpl, data) &#123;</div><div class="line">  return tpl.replace(/\&#123;\&#123;(.+?)\&#125;\&#125;/g, function (m, m1) &#123;</div><div class="line">    return data[m1];</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>3. 将一个任意长的数字变成逗号分割的格式</strong><br>    // 1234.56 =&gt; “1,234.56” , 123456789 =&gt; “123,456,789”<br>  parseToMoney(1234.56) // return “1,234.56”</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function parseToMoney(num) &#123;</div><div class="line">  num = num || &quot;&quot;;</div><div class="line">  var arr = num.toString().split(&quot;.&quot;);</div><div class="line">  var money = arr[0].replace(/(\d+?)(?=(\d&#123;3&#125;)+$)/g, &quot;$1,&quot;);</div><div class="line"></div><div class="line">  if (arr.length &gt; 1) &#123;</div><div class="line">    money += &quot;.&quot; + arr[1];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  return money;</div><div class="line">&#125;</div><div class="line"></div><div class="line">parseToMoney(1234567891.34567)</div></pre></td></tr></table></figure>
<p><strong>4. 有一个全局变量 a，有一个全局函数 b，实现一个方法bindData，执行后，a的任何赋值都会触发b的执行</strong><br>var a = {x:1};<br>function b(){<br>  console.log(‘a的值发生改变’);<br>}<br>bindData();<br>a.x = 2; // 此时输出 a的值发生改变</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">var a = &#123; x: 1, y: 2 &#125;;</div><div class="line">function b(key) &#123;</div><div class="line">  console.log(key + &apos;的值发生改变&apos;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">bindData(a, b);</div><div class="line"></div><div class="line">function bindData(target, event) &#123;</div><div class="line">  for (var key in target) &#123;</div><div class="line">    if (target.hasOwnProperty(key)) &#123;</div><div class="line">      (function (_target, _key) &#123;</div><div class="line">        var v = _target[_key];</div><div class="line">        Object.defineProperty(_target, _key, &#123;</div><div class="line">          get: function () &#123;</div><div class="line">            return v;</div><div class="line">          &#125;,</div><div class="line">          set: function (_value) &#123;</div><div class="line">            if (v != _value) &#123;</div><div class="line">              event.call(this, _key)</div><div class="line">            &#125;</div><div class="line">            v = _value;</div><div class="line">          &#125;</div><div class="line">        &#125;)</div><div class="line">      &#125;)(target, key);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">a.x = 1;</div></pre></td></tr></table></figure>
<p><strong>5. 实现一个类，当从某个数字递增或者递减到另外一个数字，并且不管数字如何变化，都可以在指定的时间内完成</strong><br>var AnimateToNum = require(“animate-num”);<br>var numAnim = new AnimateToNum({<br>  animTime:2000,    // 每次数字变动持续的时间（ms），<br>  initNum:500,      // 初始化的数字<br>  onChange:function(num){<br>  console.log(num);<br>});<br>numAnim.toNum(100); // 从500变化到100，用2000ms的时间，在onChange回调中会一直从500倒数到100</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">function AnimateToNum(options) &#123;</div><div class="line">  options = options || &#123;&#125;;</div><div class="line">  this.animTime = options.animTime || 0;</div><div class="line">  this.initNum = options.initNum || 0;</div><div class="line">  this.onChange = options.onChange || function (num) &#123; &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">AnimateToNum.prototype.toNum = function (finalNum) &#123;</div><div class="line">  if (finalNum &gt; this.initNum) &#123;</div><div class="line">    console.log(&quot;参数值不能大于初始值&quot;);</div><div class="line">    return;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  if (this.animTime &lt;= 0) &#123;</div><div class="line">    console.log(&quot;设置的animTime必须大于0&quot;);</div><div class="line">    return;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  var that = this;</div><div class="line">  var temp = that.initNum</div><div class="line"></div><div class="line">  setInterval(function () &#123;</div><div class="line">    if (temp &gt; finalNum) &#123;</div><div class="line">      temp--;</div><div class="line">      that.onChange(temp);</div><div class="line">    &#125;</div><div class="line">  &#125;, that.animTime);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>6. 现提供几个读取文件的方法，不借助全局变量实现一个函数，函数可以执行一次后返回一个目录下所有文件中是js后缀的文件列表</strong><br>var readdirSync = function(dir_path){ return [filename] } // 读取一个文件夹下的所有文件夹和文件的路径列表（Array）<br>var isDirectory = function(path) { return true/false; }   // 判断一个路径是否是文件夹<br>var existsSync = function(path){ return true/false;}      // 判断一个文件/文件夹是否存在<br>var getJSFiles = function(path) {}<br>getJSFiles(‘/code/‘); // return 一个文件列表的数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var getJSFiles = function (path) &#123;</div><div class="line">  var result = [];</div><div class="line">  if (existsSync(path)) &#123;</div><div class="line">    if (isDirectory(path)) &#123;</div><div class="line">      readdirSync(path).forEach(function (file) &#123;</div><div class="line">        result = result.concat(getJSFiles(file))</div><div class="line">      &#125;);</div><div class="line">    &#125; else if (/\.js$/.test(path)) &#123;</div><div class="line">      result.push(path);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>7. 请封装一个 CustomFetch 方法，利用原生的 fetch api，但是实现以下几个需求：</strong><br>所有请求默认带上一个 token，值是 xxx<br>请求返回的时候，内部解析内容，并且判断 success 字段是否是 true，<br>如果不是，在 catch 中可以拿到一个Error，message 和 code 是接口返回的对应的内容<br>CustomFetch(“<a href="http://api.com/api&quot;).then((data)=&gt;{" target="_blank" rel="external">http://api.com/api&quot;).then((data)=&gt;{</a><br>  console.log(data); // 如果后台返回 true<br>}).catch((e)=&gt;{<br>  console.log(e.message); // 输出 “查询错误”<br>});<br>// 接口的返回模式<br>{<br>  success: false,<br>  code: ‘QUERY_ERROR’,<br>  data: {},<br>  message: ‘查询错误’<br>}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">// 定义一个扩展错误类</div><div class="line">function FetchError(code, message) &#123;</div><div class="line">  this.code = code;</div><div class="line">  this.message = message;</div><div class="line">  this.name = &quot;FetchError&quot;;</div><div class="line">  this.stack = (new Error()).stack;</div><div class="line">&#125;</div><div class="line"></div><div class="line">FetchError.prototype = Object.create(Error.prototype);</div><div class="line">FetchError.prototype.constructor = FetchError;</div><div class="line"></div><div class="line">// 自定义fetch方法</div><div class="line">function CustomFetch(url) &#123;</div><div class="line">  var myHeaders = new Headers();</div><div class="line">  myHeaders.append(&quot;token&quot;, &quot;xxx&quot;);</div><div class="line">  myHeaders.append(&quot;Content-Type&quot;, &quot;application/json&quot;);</div><div class="line"></div><div class="line">  return fetch(url, &#123;</div><div class="line">    method: &apos;GET&apos;,</div><div class="line">    headers: myHeaders,</div><div class="line">    mode: &apos;cors&apos;,</div><div class="line">    cache: &apos;default&apos;</div><div class="line">  &#125;).then(function (response) &#123;</div><div class="line">    if (response.ok) &#123;</div><div class="line">      var res = response.json();</div><div class="line">      if (res.success) &#123;</div><div class="line">        return res.data;</div><div class="line">      &#125; else &#123;</div><div class="line">        //throw &#123; code: res.code, message: res.message &#125;;</div><div class="line">        throw new FetchError(res.code, res.message);</div><div class="line">      &#125;</div><div class="line">    &#125; else &#123;</div><div class="line">      //throw &#123; code: response.status, message: response.statusText &#125;;</div><div class="line">      throw new FetchError(response.status, response.statusText)</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 定义一个基于Promise的Ajax数据请求方法</div><div class="line">function getJSON(url, method, data, isAsync) &#123;</div><div class="line">  return new Promise(function (resolve, reject) &#123;</div><div class="line">    var xmlHttp = new XMLHttpRequest();</div><div class="line">    xmlHttp.setRequestHeader(&quot;Accept&quot;, &quot;application/json&quot;);</div><div class="line">    xmlHttp.responseType = &apos;json&apos;;</div><div class="line">    xmlHttp.onreadystatechange = handler;</div><div class="line">    xmlHttp.open(method || &quot;GET&quot;, url, isAsync == undefined ? true : isAsync);</div><div class="line">    xmlHttp.send(data);</div><div class="line"></div><div class="line">    function handler() &#123;</div><div class="line">      if (xmlHttp.readyState == 4 &amp;&amp; xmlHttp.status === 200) &#123;</div><div class="line">        resolve(xmlHttp.response);</div><div class="line">      &#125; else &#123;</div><div class="line">        reject(new Error(xmlHttp.statusText));</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 调用示例</div><div class="line">getJSON(&quot;&quot;).then(function (response) &#123;</div><div class="line">  // success</div><div class="line">&#125;).then(function (error) &#123;</div><div class="line">  // fail</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><strong>8. 算法题，实现一个函数，可以判断 a 字符串是否被包含在 b 字符串中</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">// 时间复杂度较高的算法</div><div class="line">function isSubString(a, b) &#123;</div><div class="line">  if (!a || !b) &#123;</div><div class="line">    return false;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  for (var i = 0; i &lt; b.length; i++) &#123;</div><div class="line">    var t = i;</div><div class="line">    for (var j = 0; j &lt; a.length; j++) &#123;</div><div class="line">      if (a[j] !== b[t++]) &#123;</div><div class="line">        break;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (j == a.length) &#123;</div><div class="line">      return true;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  return false;</div><div class="line">&#125;</div><div class="line"></div><div class="line">isSubString(&quot;abc&quot;, &quot;123abder&quot;);</div><div class="line"></div><div class="line">// KMP算法</div><div class="line">function isSubstrByKMP(a, b, m) &#123;</div><div class="line">  if (!a || !b) &#123;</div><div class="line">    return false;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  var i = 0, j = 0;</div><div class="line">  while (i &lt; b.length &amp;&amp; j &lt; a.length) &#123;</div><div class="line">    if (a[j] == b[i]) &#123;</div><div class="line">      j++;</div><div class="line">      i++;</div><div class="line">    &#125; else &#123;</div><div class="line">      if (j == 0) &#123;</div><div class="line">        i++;</div><div class="line">      &#125; else &#123;</div><div class="line">        j = m[j - 1];</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  if (j == a.length) &#123;</div><div class="line">    return true;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  return false;</div><div class="line">&#125;</div><div class="line"></div><div class="line">isSubstrByKMP(&quot;abcdabd&quot;, &quot;bbcabcdababcdabcdabde&quot;, [0, 0, 0, 0, 1, 2, 0])</div></pre></td></tr></table></figure>
<p><strong>9. 下面五段代码分别输出什么？并且什么时候输出什么？</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">for (var i = 0; i &lt; 5; i++) &#123;</div><div class="line">  console.log(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// result: 0,1,2,3,4</div><div class="line"></div><div class="line">for (var i = 0; i &lt; 5; i++) &#123;</div><div class="line">  setTimeout(function () &#123;</div><div class="line">    console.log(i);</div><div class="line">  &#125;, 1000 * i);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// result: 5,5,5,5,5</div><div class="line"></div><div class="line">for (var i = 0; i &lt; 5; i++) &#123;</div><div class="line">  (function (i) &#123;</div><div class="line">    setTimeout(function () &#123;</div><div class="line">      console.log(i);</div><div class="line">    &#125;, i * 1000);</div><div class="line">  &#125;)(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// result: 0,1,2,3,4</div><div class="line"></div><div class="line">for (var i = 0; i &lt; 5; i++) &#123;</div><div class="line">  (function () &#123;</div><div class="line">    setTimeout(function () &#123;</div><div class="line">      console.log(i);</div><div class="line">    &#125;, i * 1000);</div><div class="line">  &#125;)(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// result: 5,5,5,5,5</div><div class="line"></div><div class="line">for (var i = 0; i &lt; 5; i++) &#123;</div><div class="line">  setTimeout((function (i) &#123;</div><div class="line">    console.log(i);</div><div class="line">  &#125;)(i), i * 1000);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// result: 0,1,2,3,4</div></pre></td></tr></table></figure>
<p><strong>10. 将数字转换成中文大写的表示，处理到万级别，例如 12345 =&gt; 一万二千三百四十五</strong><br>function toLowerNum(){}<br>console.log(toLowerNum(12345)); // 输出 一万二千三百四十五<br>console.log(toLowerNum(10001)); // 输出 一万零一<br>console.log(toLowerNum(10011)); // 输出 一万零十一<br>console.log(toLowerNum(10000)); // 输出 一万</p>
<p>(未完待续)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理了一些JS练习题和参考代码，请看下文。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 补全parseParm()，使其输出如下结果：&lt;/strong&gt;&lt;br&gt;{&lt;br&gt;   user: ‘anonymous’,&lt;br&gt;   id: [123, 456],  // 重复出现的 key 要组装成数组，能被转成数字的就转成数字类型&lt;br&gt;   city: ‘北京’,    // 中文&lt;br&gt;   enabled: true,  // 未指定值的 key 约定值为 true&lt;br&gt;}&lt;br&gt;url = ‘&lt;a href=&quot;http://www.domain.com/?user=anonymous&amp;amp;id=123&amp;amp;id=456&amp;amp;\&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.domain.com/?user=anonymous&amp;amp;id=123&amp;amp;id=456&amp;amp;\&lt;/a&gt;&lt;br&gt;      city=%E5%8C%97%E4%BA%AC&amp;amp;d&amp;amp;enabled’;&lt;br&gt;parseParam(url);&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://terrahuang.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="https://terrahuang.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+GithubPages+nexT站点搭建</title>
    <link href="https://terrahuang.github.io/2017/07/27/hexo-github-nexT/"/>
    <id>https://terrahuang.github.io/2017/07/27/hexo-github-nexT/</id>
    <published>2017-07-27T07:11:06.000Z</published>
    <updated>2017-08-29T10:21:56.250Z</updated>
    
    <content type="html"><![CDATA[<div class="note warning"><p><strong>写在前面</strong><br>    趁离职期间想整理下这些年积累的东西，决定自己建个站点，为了方便简单选择了Hexo+GitHub Pages。但是做后端开发久了，真心觉得静态站点有点费事。考虑到github免费，那先将就吧，以后还是得自己搞个服务器。这篇先来讲讲搭建时遇到的坑，下一篇讲讲我对Hexo的理解。</p>
</div>
<h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><p>关于Hexo安装操作网上有很多，建议直接参考<a href="https://hexo.io/zh-cn/" title="Hexo官网" target="_blank" rel="external">Hexo官网</a>。我贴下几条关键指令：</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// 安装Hexo环境</div><div class="line">npm install hexo-cli -g</div><div class="line"></div><div class="line">// 初始化blog站点</div><div class="line">hexo init blog</div><div class="line">cd blog</div><div class="line">npm install</div><div class="line"></div><div class="line">// 生成静态文件</div><div class="line">hexo g</div><div class="line"></div><div class="line">// 在本地启动站点，指定端口，请加-p [端口]</div><div class="line">hexo server</div><div class="line">hexo server -p 5000</div><div class="line"></div><div class="line">// 发布</div><div class="line">hexo deploy</div></pre></td></tr></table></figure>
<h2 id="利用Github-Pages部署站点"><a href="#利用Github-Pages部署站点" class="headerlink" title="利用Github Pages部署站点"></a>利用Github Pages部署站点</h2><p>由于Hexo生成的静态文件，恰好github支持静态文件渲染，github就成了个人博客最好的免费服务器。我在网上查到很多部署方面的文章，基本都是如下说法：</p>
<p><strong>1. 在_config.yml配置deploy参数，前提先安装hexo-deployer-git插件：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: https://github.com/TerraHuang/terrahuang.github.io.git</div><div class="line">  branch:   // 分支这个地方很关键呀，被坑了...</div></pre></td></tr></table></figure></p>
<p><strong>2. 在github上创建新的repository，且以<code>[账号名].github.io</code>命名。将该项目克隆到本地。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/TerraHuang/terrahuang.github.io.git</div></pre></td></tr></table></figure></p>
<p>   以上步骤都没错，非常正确，不过坑马上就来了。<code>前方高能</code></p>
<h3 id="大坑一"><a href="#大坑一" class="headerlink" title="大坑一"></a>大坑一</h3><p><strong>3. 将hexo生成站点的代码发布到master分支，将部署的静态文件代码发布到gh-pages分支，然后在github项目Settings中将Source改为gh-pages。我照做如下：</strong></p>
<p><img src="/screenshot/20170728/git-page-setting.png" alt=""></p>
<p>虽然我的内心很崩溃，但是我还没放弃！！！</p>
<p>还好Source旁边有个<code>Learn more</code>，用户体验做的不错，点个赞。</p>
<p>点开它，才发现别有洞天呀，网上文章真不能全信~~</p>
<p><img src="/screenshot/20170728/learn-more.png" alt=""></p>
<div class="note primary"><p>哦，原来[账号名].github.io这种命名只能使用master分支作为站点资源。</p>
</div>
<p>另外Github pages还支持其它几种方式，如下：</p>
<p><img src="/screenshot/20170728/page-source.png" alt=""></p>
<p><strong>4. 正确的Github Pages发布方式:</strong></p>
<ul>
<li>静态站点部署文件应放到master分支</li>
<li>Hexo生成代码放到其它分支，或者新建其它的repository来托管</li>
<li><p>_config.yml的deploy-&gt;branch须写成<code>master</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: ...</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
</li>
<li><p>在浏览器中请求 <a href="https://[账号名].github.io" target="_blank" rel="external">https://[账号名].github.io</a> 即为个人站点。</p>
</li>
</ul>
<p><strong>5. Github Pages绑定域名：</strong></p>
<ul>
<li>在阿里云万网上购买域名</li>
<li>在master分支新建CNAME文件，名称必须全大写，内容为需绑定的域名<br><img src="/screenshot/20170728/dns.png" alt=""></li>
<li>在万网域名管理页面新增一条解析，如下：<br><img src="/screenshot/20170728/dns-express.png" alt=""></li>
</ul>
<p>具体步骤说明，请参考<strong>yuan3065的博客</strong>：<a href="http://blog.csdn.net/yuan3065/article/details/51594454" target="_blank" rel="external">GitHub Pages 绑定来自阿里云的域名</a></p>
<h2 id="nexT主题及改造"><a href="#nexT主题及改造" class="headerlink" title="nexT主题及改造"></a>nexT主题及改造</h2><p>毕竟是自己的第一个站点，选用主题也是很谨慎的，在众多炫目的主题中选择了nexT。据说目前是得星最多的一套主题。我看中它的点如下：<br><div class="note primary"><p><strong>优势：</strong> 样式简洁，文档详细，提供的第三方服务丰富，改造容易</p>
</div></p>
<h3 id="主题色"><a href="#主题色" class="headerlink" title="主题色"></a>主题色</h3><p>原来的黑色太暗沉，像我心里这么阳光的人，果断换了个明亮的调调。但是nexT并没有提供主题色的更改配置，我用的是笨办法，直接在<code>theme/next/source/css/</code>中修改色值。以后有时间再修改下代码，提取到_config.yml配置中来。</p>
<h3 id="新增第三方服务"><a href="#新增第三方服务" class="headerlink" title="新增第三方服务"></a>新增第三方服务</h3><p>配置第三方服务比较简单，请参考<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">nexT文档</a></p>
<p>新增功能如下：</p>
<ul>
<li><strong>站内搜索：插件hexo-generator-searchdb</strong></li>
<li><strong>文章阅读次数统计：LeanCloud</strong></li>
<li><strong>内容分享：Jiathis</strong></li>
<li><strong>评论系统：disqus（不翻墙无法显示，考虑代理）</strong><h3 id="大坑二"><a href="#大坑二" class="headerlink" title="大坑二"></a>大坑二</h3><div class="note primary"><p>特别提醒：注册disqus时，一定要翻墙。如果是利用hosts文件翻墙，请在hosts新增一条[sitename].disqus.com-&gt;xx.xx.xx.xx域名映射，IP地址与disqus.com相同即可。</p>
</div>
</li>
</ul>
<h3 id="多图显示"><a href="#多图显示" class="headerlink" title="多图显示"></a>多图显示</h3><p>为了展示图册效果，尝试显示多图，在网上找到方法如下：</p>
<p><strong>1. 在站点/source下新增pictures/index.md文件。Front-matter如下：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: &quot;图册&quot;</div><div class="line">type: &quot;picture&quot;  //type必须为&apos;picture&apos;</div><div class="line">layout: post</div><div class="line">comments: false</div><div class="line">---</div></pre></td></tr></table></figure></p>
<p><strong>2. 内容为多图时，新增标签<code>{\% gp n-n \%}(content){\% endgp \%}</code>。具体如下：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;% gp 2-2 %&#125;</div><div class="line">![](http://octodex.github.com/images/minion.png)</div><div class="line">![](http://octodex.github.com/images/minion.png)</div><div class="line">&#123;% endgp %&#125;</div></pre></td></tr></table></figure>
<p>然并卵…    <code>前方高能</code></p>
<h3 id="大坑三"><a href="#大坑三" class="headerlink" title="大坑三"></a>大坑三</h3><p>居然报错了，为什么会报错，我的内心是拒绝的… 还好我没放弃！！！</p>
<p>找到<code>{\% gp \%}</code>标签代码：<code>/theme/next/source/script/tags/group-pictures.js</code></p>
<p>经过多次测试，发现代码错误，修改如下(43-63行)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* 2-2</div><div class="line">*</div><div class="line">* □ □  // 此为n-n设值所展示的排列方式，作为设值参考。默认：一行3列，依次排列</div><div class="line">*</div><div class="line">* @param pictures</div><div class="line">*/</div><div class="line">group2Layout2: function (pictures) &#123;</div><div class="line">  return this.getHTML([pictures]);  // 将pictures变成二维数组作为实参</div><div class="line">&#125;,</div><div class="line"></div><div class="line">/**</div><div class="line">* 3-1</div><div class="line">*</div><div class="line">* □ □ □</div><div class="line">*</div><div class="line">* @param pictures</div><div class="line">*/</div><div class="line">group3Layout1: function (pictures) &#123;</div><div class="line">  return this.getHTML([pictures]);  // 将pictures变成二维数组作为实参</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<div class="note primary"><p><strong>特别说明：</strong>其实只有2-2，3-1的组合会报错，只有两个方法传了一维数组，导致后续报错。</p>
</div>
<p>好了，现在不报错了。启动起来，果然可以展示一行两列的图组了。</p>
<p>然并卵…   <code>前方高能</code><br>怎么不能点击放大？！ 我的内心是崩溃的，但是我没有放弃！！！</p>
<p>通过与非<code>gp</code>标签图片对比，我发现<code>gp</code>标签渲染时，并没有给图片加<code>&lt;a/&gt;</code>标签，导致fancybox插件并未运行起来。</p>
<p>OK，找到原因了。定位代码: 在<code>/theme/next/source/script/tags/group-pictures.js</code>（824行<code>getColumnHtml</code>方法），做如下修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">getColumnHTML: function (pictures) &#123;</div><div class="line">    var columns = [];</div><div class="line">    var columnWidth = 100 / pictures.length;</div><div class="line">    var columnStyle = &apos; style=&quot;width: &apos; + columnWidth + &apos;%;&quot;&apos;;</div><div class="line"></div><div class="line">    for (var i = 0; i &lt; pictures.length; i++) &#123;</div><div class="line">    </div><div class="line">      // 在&lt;img /&gt;元素上加一个父层&lt;a/&gt;,结构如下：</div><div class="line">      // &lt;div class=&quot;group-picture-column&quot; &gt;</div><div class="line">      // &lt;a href=&quot;&quot; class=&quot;fancybox fancybox.image&quot; rel=&quot;group&quot;&gt;</div><div class="line">      //   &lt;img  /&gt;</div><div class="line">      // &lt;/a&gt;</div><div class="line">      // &lt;/div&gt;</div><div class="line">      var src = pictures[i].match(/src=&quot;[^&quot;]*&quot;/)[0].replace(/(src=)|&quot;/g,&quot;&quot;);</div><div class="line">      var html = &apos;&lt;div class=&quot;group-picture-column&quot; &apos; + columnStyle + &apos;&gt;&apos;</div><div class="line">          + &apos;&lt;a href=&quot;&apos;+ src +&apos;&quot; class=&quot;fancybox fancybox.image&quot; rel=&quot;group&quot;&gt;&apos;</div><div class="line">          + pictures[i] </div><div class="line">          + &apos;&lt;/a&gt;&lt;/div&gt;&apos;</div><div class="line">      columns.push(html);</div><div class="line">    &#125;</div><div class="line">    return columns.join(&apos;&apos;);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>这回终于解决了。效果请参考我的<a href="/pictures">图册</a>。</p>
<p><strong>填坑完结。希望我踩过的坑，对大家有所帮助。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note warning&quot;&gt;&lt;p&gt;&lt;strong&gt;写在前面&lt;/strong&gt;&lt;br&gt;    趁离职期间想整理下这些年积累的东西，决定自己建个站点，为了方便简单选择了Hexo+GitHub Pages。但是做后端开发久了，真心觉得静态站点有点费事。考虑到github免费，那先将就吧，以后还是得自己搞个服务器。这篇先来讲讲搭建时遇到的坑，下一篇讲讲我对Hexo的理解。&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;Hexo安装&quot;&gt;&lt;a href=&quot;#Hexo安装&quot; class=&quot;headerlink&quot; title=&quot;Hexo安装&quot;&gt;&lt;/a&gt;Hexo安装&lt;/h2&gt;&lt;p&gt;关于Hexo安装操作网上有很多，建议直接参考&lt;a href=&quot;https://hexo.io/zh-cn/&quot; title=&quot;Hexo官网&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo官网&lt;/a&gt;。我贴下几条关键指令：&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://terrahuang.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Hexo" scheme="https://terrahuang.github.io/tags/Hexo/"/>
    
      <category term="nexT" scheme="https://terrahuang.github.io/tags/nexT/"/>
    
      <category term="github" scheme="https://terrahuang.github.io/tags/github/"/>
    
      <category term="填坑记" scheme="https://terrahuang.github.io/tags/%E5%A1%AB%E5%9D%91%E8%AE%B0/"/>
    
  </entry>
  
</feed>
